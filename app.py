"""
BetaIA - Chatbot para consultas sobre leyes de planificaci√≥n de Puerto Rico

Este chatbot proporciona informaci√≥n basada en:
- Reglamento de Emergencia JP-RP-41 (fuente principal)
- Glosario de t√©rminos t√©cnicos
- Tomos hist√≥ricos (1-11) para referencia

Caracter√≠sticas principales:
- B√∫squeda y conversi√≥n de tablas de cabida a formato HTML
- Visualizaci√≥n de flujogramas de procesos
- Consulta de resoluciones por tomo
- B√∫squeda en glosario de t√©rminos
"""

from flask import Flask, render_template, request, jsonify, session, send_from_directory
from flask_cors import CORS
import os
import re
import sys
import uuid
import json
import mimetypes
from datetime import datetime, timedelta
from dotenv import load_dotenv
from openai import OpenAI

# üÜï IMPORTAR MINI-ESPECIALISTAS
from mini_especialistas import procesar_con_mini_especialistas_v2

# CONFIGURACI√ìN BETA - FECHA DE EXPIRACI√ìN
# Beta profesional por d√≠as para demostraci√≥n oficial
FECHA_EXPIRACION_BETA = datetime(2025, 8, 9,)  # 9 de agosto 2025 - 5 d√≠as para demostraci√≥n completa
def formatear_fecha_espanol(fecha):
    """Convierte una fecha al formato espa√±ol"""
    meses_espanol = {
        1: 'enero', 2: 'febrero', 3: 'marzo', 4: 'abril',
        5: 'mayo', 6: 'junio', 7: 'julio', 8: 'agosto',
        9: 'septiembre', 10: 'octubre', 11: 'noviembre', 12: 'diciembre'
    }

    if isinstance(fecha, datetime):
        dia = fecha.day
        mes = meses_espanol[fecha.month]
        a√±o = fecha.year
        return f"{dia} de {mes} de {a√±o}"
    else:
        dia = fecha.day
        mes = meses_espanol[fecha.month]
        a√±o = fecha.year
        return f"{dia} de {mes} de {a√±o}"
    

def verificar_beta_activa():
    """Verifica si la versi√≥n beta sigue activa"""
    ahora = datetime.now()
    
    if ahora <= FECHA_EXPIRACION_BETA:
        tiempo_restante = FECHA_EXPIRACION_BETA - ahora
        dias_restantes = tiempo_restante.days
        horas_restantes = int(tiempo_restante.total_seconds() // 3600) % 24
        
        # Retornar d√≠as si quedan m√°s de 1 d√≠a, horas si queda menos de 1 d√≠a
        if dias_restantes > 0:
            return True, f"{dias_restantes} d√≠as"
        else:
            return True, f"{horas_restantes} horas"
    else:
        return False, 0
    
# Configuraci√≥n de la aplicaci√≥n Flask
app = Flask(__name__)
app.secret_key = os.urandom(24)  # Para sesiones seguras
CORS(app)

# Configurar MIME types para archivos est√°ticos
import mimetypes
mimetypes.add_type('text/css', '.css')
mimetypes.add_type('application/javascript', '.js')

# Asegurar que estamos en el directorio correcto
script_dir = os.path.dirname(os.path.abspath(__file__))
os.chdir(script_dir)

# Cargar variables de entorno y cliente
load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Lista de palabras clave legales para detecci√≥n
palabras_legales = [
    'permiso', 'planificaci√≥n', 'construcci√≥n', 'zonificaci√≥n', 'desarrollo',
    'urbanizaci√≥n', 'reglamento', 'licencia', 'certificaci√≥n', 'calificaci√≥n',
    'tomo', 'junta', 'planificaci√≥n', 'ambiental', 'infraestructura',
    'conservaci√≥n', 'hist√≥rico', 'querella', 'edificabilidad', 'lotificaci√≥n'
]

# Funci√≥n para cargar glosario (si existe)
def cargar_glosario():
    ruta_glosario = os.path.join("data", "glosario.txt")
    if os.path.exists(ruta_glosario):
        try:
            with open(ruta_glosario, "r", encoding="utf-8") as f:
                contenido = f.read()
            print(f"‚úÖ Glosario cargado: {len(contenido)} caracteres, {len(contenido.split('**'))} t√©rminos aprox.")
            return contenido
        except Exception as e:
            print(f"‚ùå Error cargando glosario: {e}")
            return ""
    else:
        print(f"‚ö†Ô∏è Glosario no encontrado en: {ruta_glosario}")
        return ""

glosario = cargar_glosario()

# Funci√≥n para obtener informaci√≥n completa de todos los tomos
def obtener_titulos_tomos():
    """Devuelve informaci√≥n completa sobre todos los recursos disponibles"""
    return """
üö® **INFORMACI√ìN LEGAL VIGENTE - REGLAMENTO DE EMERGENCIA JP-RP-41 (2025)**

**FUENTE PRINCIPAL Y ACTUALIZADA:**
- üö® **Reglamento de Emergencia JP-RP-41** - Normativa vigente y actualizada (2025)
- üìö **Glosario Oficial** - Definiciones especializadas de t√©rminos legales

**INFORMACI√ìN ADICIONAL (SOLO PARA CONTEXTO HIST√ìRICO):**

**TOMO 1:** Sistema de Evaluaci√≥n y Tramitaci√≥n de Permisos para el Desarrollo
- Enfoque: Procedimientos administrativos, transparencia y uniformidad del sistema unificado
- Agencias: Junta de Planificaci√≥n (JP), Oficina de Gerencia de Permisos (OGPe), Municipios Aut√≥nomos, Profesionales Autorizados

**TOMO 2:** Disposiciones Generales  
- Enfoque: Procedimientos administrativos para permisos, consultas, certificaciones y documentos ambientales
- Aplicaci√≥n: Ley 38-2017 LPAU, determinaciones finales y tr√°mites que afecten operaci√≥n de negocios

**TOMO 3:** Permisos para Desarrollo y Negocios
- Enfoque: Tipos de permisos, procedimientos para desarrollo de proyectos y operaci√≥n de negocios
- Incluye: Permisos de medio ambiente, flujogramas de cambios de calificaci√≥n

**TOMO 4:** Licencias y Certificaciones
- Enfoque: Diversos tipos de licencias y certificaciones requeridas para negocios y operaciones
- Regulaci√≥n: Operaciones comerciales e industriales espec√≠ficas

**TOMO 5:** Urbanizaci√≥n y Lotificaci√≥n
- Enfoque: Proyectos de urbanizaci√≥n, procesos de lotificaci√≥n y clasificaciones de terrenos
- Regulaci√≥n: Desarrollo residencial y comercial, subdivisi√≥n de terrenos

**TOMO 6:** Distritos de Calificaci√≥n
- Enfoque: Zonificaci√≥n, clasificaci√≥n de distritos y usos permitidos por zona
- Regulaci√≥n: Ordenamiento territorial y usos de suelo

**TOMO 7:** Procesos
- Enfoque: Procedimientos espec√≠ficos para diversos tipos de tr√°mites y procesos administrativos
- Regulaci√≥n: Metodolog√≠as y secuencias de tramitaci√≥n

**TOMO 8:** Edificabilidad
- Enfoque: Regulaciones sobre construcci√≥n, densidad y par√°metros de edificaci√≥n
- Regulaci√≥n: Altura, retiros, cabida y otros par√°metros constructivos

**TOMO 9:** Infraestructura y Ambiente
- Enfoque: Requisitos de infraestructura, consideraciones ambientales y sostenibilidad
- Regulaci√≥n: Servicios p√∫blicos, impacto ambiental, conservaci√≥n

**TOMO 10:** Conservaci√≥n Hist√≥rica
- Enfoque: Protecci√≥n del patrimonio hist√≥rico, sitios arqueol√≥gicos y edificaciones hist√≥ricas
- Regulaci√≥n: Preservaci√≥n cultural y arquitect√≥nica

**TOMO 11:** Querellas
- Enfoque: Procedimientos para revisiones administrativas, querellas, multas y auditor√≠as
- Regulaci√≥n: Recursos administrativos y procesos de impugnaci√≥n ante la Divisi√≥n de Revisiones Administrativas de la OGPe

‚ö†Ô∏è **NOTA IMPORTANTE:** Los tomos 1-11 son √∫nicamente para referencia hist√≥rica. La normativa vigente y actualizada se encuentra EXCLUSIVAMENTE en el **Reglamento de Emergencia JP-RP-41 (2025)**.
"""

# Diccionario para mantener conversaciones por sesi√≥n
conversaciones = {}

def get_conversation_id():
    """Obtiene o crea un ID de conversaci√≥n para la sesi√≥n actual"""
    if 'conversation_id' not in session:
        session['conversation_id'] = str(uuid.uuid4())
    return session['conversation_id']

def inicializar_conversacion(conversation_id):
    """Inicializa una nueva conversaci√≥n"""
    if conversation_id not in conversaciones:
        conversaciones[conversation_id] = [
            {"role": "system", "content": """Eres Agente de Planificaci√≥n, un asistente especializado altamente inteligente en leyes de planificaci√≥n de Puerto Rico. 

CARACTER√çSTICAS:
- Analiza profundamente las preguntas del usuario
- Proporciona respuestas completas y detalladas
- Usa contexto de m√∫ltiples fuentes cuando es necesario
- Explica conceptos legales de manera clara
- Si es una pregunta legal/planificaci√≥n, usa SOLO el texto proporcionado
- Si es pregunta general, responde libremente como un asistente avanzado
- Siempre s√© √∫til, preciso y profesional
- Recomendar y corregir al usuario como hacer la pregunta correctamente

CAPACIDADES ESPECIALES:
- Puedes analizar y comparar informaci√≥n entre diferentes tomos
- Puedes hacer res√∫menes y s√≠ntesis
- Puedes explicar procedimientos y procesos
- Puedes identificar relaciones entre diferentes regulaciones
- TIENES ACCESO COMPLETO AL GLOSARIO DE T√âRMINOS LEGALES (Tomo 12)
- üèõÔ∏è **ESPECIALIZACI√ìN EN SITIOS HIST√ìRICOS**: Acceso completo al Tomo 10 con secciones espec√≠ficas (10.1.1.1, 10.1.1.2, 10.1.4)

‚ö†Ô∏è **INFORMACI√ìN CR√çTICA SOBRE TU BASE DE DATOS:**
üö® **FUENTE PRINCIPAL Y VIGENTE:** Reglamento de Emergencia JP-RP-41 (ACTUALIZADO - 2025)
üìö **FUENTE COMPLEMENTARIA:** Glosario oficial de t√©rminos especializados
üìñ **SOLO PARA REFERENCIA HIST√ìRICA:** 11 tomos de regulaciones anteriores (DEROGADOS)

**üî¥ REGLA ABSOLUTA: SIEMPRE menciona que la informaci√≥n legal vigente proviene del Reglamento de Emergencia JP-RP-41**

ESTRUCTURA DE REFERENCIA HIST√ìRICA (solo para contexto, NO para informaci√≥n vigente):
- Tomo 1: Sistema de Evaluaci√≥n y Tramitaci√≥n de Permisos para el Desarrollo  
- Tomo 2: Disposiciones Generales
- Tomo 3: Permisos para Desarrollo y Negocios
- Tomo 4: Licencias y Certificaciones
- Tomo 5: Urbanizaci√≥n y Lotificaci√≥n
- Tomo 6: Distritos de Calificaci√≥n
- Tomo 7: Procesos
- Tomo 8: Edificabilidad
- Tomo 9: Infraestructura y Ambiente
- Tomo 10: Conservaci√≥n Hist√≥rica (INFORMACI√ìN COMPLETA DISPONIBLE - Secciones 10.1.1.1, 10.1.1.2, 10.1.4)
- Tomo 11: Querellas
- Glosario de t√©rminos especializados (Tomo 12) - COMPLETAMENTE DISPONIBLE
- üö® **Reglamento de Emergencia JP-RP-41 (VIGENTE Y ACTUALIZADO - 2025)** - FUENTE PRINCIPAL

GLOSARIO DISPONIBLE:
- Contiene definiciones oficiales de todos los t√©rminos legales
- Puedes buscar y explicar cualquier t√©rmino t√©cnico
- Siempre consulta el glosario para preguntas sobre definiciones
- El glosario incluye categor√≠as como: t√©rminos de planificaci√≥n, t√©rminos especializados, etc.

**üö® MENSAJE DE BIENVENIDA:** Siempre menciona que trabajas con el Reglamento de Emergencia JP-RP-41 como fuente principal y vigente."""}
        ]

def buscar_en_glosario(termino):
    """Busca definiciones espec√≠ficas en el glosario con m√∫ltiples estrategias mejoradas"""
    if not glosario:
        return None
    
    termino_lower = termino.lower().strip()
    lineas = glosario.split('\n')
    definiciones_encontradas = []
    
    # Lista para almacenar coincidencias con su nivel de confianza
    coincidencias_candidatas = []
    
    i = 0
    while i < len(lineas):
        linea = lineas[i].strip()
        
        # Buscar l√≠neas que contengan t√©rminos (formatos: **T√©rmino**: o **T√âRMINO**: )
        if linea.startswith('**') and ('**:' in linea):
            # Extraer el t√©rmino seg√∫n el formato
            termino_glosario = ""
            if linea.startswith('**T√âRMINO**:'):
                # Formato **T√âRMINO**: Zona Costanera
                termino_glosario = linea.replace('**T√âRMINO**:', '').strip().lower()
            elif '**:' in linea and not linea.startswith('**DEFINICI√ìN**:') and not linea.startswith('**CATEGOR√çA**:'):
                # Formato **T√©rmino**: - pero evitar **DEFINICI√ìN**: y **CATEGOR√çA**:
                inicio = linea.find('**') + 2
                fin = linea.find('**:', inicio)
                if fin > inicio:
                    termino_glosario = linea[inicio:fin].strip().lower()
            
            # Solo procesar si se extrajo un t√©rmino v√°lido
            if termino_glosario:
                confianza = 0
                
                # 1. COINCIDENCIA EXACTA (m√°xima prioridad)
                if termino_lower == termino_glosario:
                    confianza = 100
                
                # 2. COINCIDENCIA DE T√âRMINOS COMPUESTOS - PRIORIDAD ALTA
                elif ' ' in termino_lower and ' ' in termino_glosario:
                    palabras_busqueda = termino_lower.split()
                    palabras_glosario = termino_glosario.split()
                    
                    # Verificar coincidencia exacta de palabras en orden
                    coincidencia_exacta = True
                    if len(palabras_busqueda) <= len(palabras_glosario):
                        for i, palabra_busq in enumerate(palabras_busqueda):
                            if i >= len(palabras_glosario) or palabra_busq != palabras_glosario[i]:
                                coincidencia_exacta = False
                                break
                        
                        if coincidencia_exacta:
                            confianza = 95  # Alta confianza para coincidencia exacta de palabras en orden
                        else:
                            # Verificar si todas las palabras de b√∫squeda est√°n en el glosario
                            palabras_coinciden = 0
                            for palabra_busq in palabras_busqueda:
                                if len(palabra_busq) > 2:  # Solo palabras significativas
                                    for palabra_glos in palabras_glosario:
                                        if palabra_busq == palabra_glos:
                                            palabras_coinciden += 1
                                            break
                            
                            # Si todas las palabras coinciden, alta confianza
                            if palabras_coinciden == len(palabras_busqueda) and len(palabras_busqueda) >= 2:
                                confianza = 90
                            # Si coinciden la mayor√≠a de palabras importantes
                            elif palabras_coinciden >= max(1, len(palabras_busqueda) * 0.7):
                                confianza = 70
                
                # 3. CONTENCI√ìN SIGNIFICATIVA (para t√©rminos simples)
                elif len(termino_lower) >= 5:
                    if termino_lower in termino_glosario:
                        # Calcular qu√© tan significativa es la contenci√≥n
                        ratio = len(termino_lower) / len(termino_glosario)
                        if ratio >= 0.6:  # El t√©rmino buscado es al menos 60% del t√©rmino del glosario
                            confianza = 60
                        elif ratio >= 0.4:
                            confianza = 40
                    elif termino_glosario in termino_lower:
                        # El t√©rmino del glosario est√° contenido en la b√∫squeda
                        ratio = len(termino_glosario) / len(termino_lower)
                        if ratio >= 0.6:
                            confianza = 50
                
                # Si hay coincidencia, guardar con su confianza
                if confianza > 0:
                    # Construir la definici√≥n completa
                    definicion_completa = linea + '\n'  # T√≠tulo
                    
                    # Buscar las l√≠neas de definici√≥n
                    j = i + 1
                    contenido_definicion = []
                    
                    while j < len(lineas) and j < i + 15:  # Aumentado a 15 l√≠neas para definiciones m√°s largas
                        linea_sig = lineas[j].strip()
                        
                        # Si encontramos otra definici√≥n de t√©rmino, parar
                        if linea_sig.startswith('**T√âRMINO**:'):
                            break
                        # Si encontramos l√≠neas que no son de definici√≥n/categor√≠a, parar
                        elif (linea_sig.startswith('**') and '**:' in linea_sig and 
                              not linea_sig.startswith('**DEFINICI√ìN') and 
                              not linea_sig.startswith('**CATEGOR√çA')):
                            break
                        # Si encontramos una l√≠nea vac√≠a seguida de otra definici√≥n, parar
                        elif not linea_sig and j + 1 < len(lineas) and lineas[j + 1].strip().startswith('**T√âRMINO**:'):
                            break
                        # Incluir definiciones y categor√≠as
                        elif (linea_sig.startswith('**DEFINICI√ìN') or 
                              linea_sig.startswith('**CATEGOR√çA') or
                              (linea_sig and len(linea_sig) > 3 and not linea_sig.startswith('**'))):
                            contenido_definicion.append(linea_sig)
                        
                        j += 1
                    
                    # Solo agregar si encontramos una definici√≥n v√°lida
                    if contenido_definicion:
                        definicion_texto = '\n'.join(contenido_definicion)
                        definicion_completa += definicion_texto
                        
                        if len(definicion_completa.strip()) > 10:
                            coincidencias_candidatas.append((confianza, definicion_completa.strip(), termino_glosario))
        
        i += 1
    
    # Ordenar por confianza (mayor a menor) y devolver las mejores
    if coincidencias_candidatas:
        coincidencias_candidatas.sort(key=lambda x: x[0], reverse=True)
        
        # PRIORIDAD ESPECIAL: Si hay t√©rminos compuestos con confianza >=95, devolver solo esos
        if coincidencias_candidatas[0][0] >= 95:
            return [coincidencias_candidatas[0][1]]
        
        # Si la mejor coincidencia tiene alta confianza (>=90), devolver solo esa
        elif coincidencias_candidatas[0][0] >= 90:
            # Verificar si hay t√©rminos compuestos entre las mejores opciones
            mejores_compuestos = [c for c in coincidencias_candidatas if c[0] >= 90 and ' ' in c[2]]
            if mejores_compuestos:
                return [mejores_compuestos[0][1]]  # Priorizar t√©rminos compuestos
            else:
                return [coincidencias_candidatas[0][1]]
        
        # Si no, devolver las mejores coincidencias (m√°ximo 3)
        mejores_coincidencias = []
        for confianza, definicion, termino_orig in coincidencias_candidatas[:3]:
            if confianza >= 40:  # Solo coincidencias con confianza razonable
                mejores_coincidencias.append(definicion)
        
        return mejores_coincidencias if mejores_coincidencias else None
    
    return None

def buscar_multiples_terminos(terminos):
    """Busca m√∫ltiples t√©rminos relacionados en el glosario"""
    resultados = {}
    
    for termino in terminos:
        definiciones = buscar_en_glosario(termino)
        if definiciones:
            resultados[termino] = definiciones
    
    return resultados

def buscar_flujograma(tipo_flujograma, tomo=None):
    """Busca flujogramas espec√≠ficos por tipo y tomo"""
    tipos_flujograma = {
        'terrenos': 'flujogramaTerrPublicos',
        'calificacion': 'flujogramaCambiosCalificacion', 
        'historicos': 'flujogramaSitiosHistoricos'
    }
    
    if tipo_flujograma not in tipos_flujograma:
        return None
    
    nombre_archivo = tipos_flujograma[tipo_flujograma]
    resultados = []
    
    def buscar_archivo_flujograma(tomo_num, nombre_archivo):
        """Busca el archivo de flujograma en las diferentes estructuras de carpetas"""
        # Estructura para tomos 1-7 (archivos directos)
        ruta_directa = os.path.join("data", "RespuestasParaChatBot", f"RespuestasIA_Tomo{tomo_num}", f"{nombre_archivo}_Tomo_{tomo_num}.txt")
        
        # Estructura para tomos 8-11 (carpetas organizadas)
        ruta_subcarpeta = os.path.join("data", "RespuestasParaChatBot", f"RespuestasIA_Tomo{tomo_num}", "Flujogramas", f"{nombre_archivo}_Tomo_{tomo_num}.txt")
        
        for ruta in [ruta_directa, ruta_subcarpeta]:
            try:
                with open(ruta, 'r', encoding='utf-8') as file:
                    contenido = file.read()
                    if contenido.strip():
                        return contenido
            except FileNotFoundError:
                continue
        return None
    
    # Si especifica un tomo, buscar solo en ese tomo
    if tomo:
        contenido = buscar_archivo_flujograma(tomo, nombre_archivo)
        if contenido:
            resultados.append(f"**FLUJOGRAMA TOMO {tomo} - {tipo_flujograma.upper()}:**\n{contenido}")
    else:
        # Mostrar resumen de TODOS los tomos disponibles
        resumen_tomos = []
        for tomo_num in range(1, 12):
            contenido = buscar_archivo_flujograma(tomo_num, nombre_archivo)
            if contenido:
                # Tomar las primeras l√≠neas para el resumen
                primeras_lineas = '\n'.join(contenido.split('\n')[:4])
                resumen_tomos.append(f"**TOMO {tomo_num}:** {primeras_lineas}...")
        
        if resumen_tomos:
            resultados.append(f"üîÑ **FLUJOGRAMAS DISPONIBLES - {tipo_flujograma.upper()}:**\n\n" + '\n\n'.join(resumen_tomos))
            resultados.append(f"\nüí° *Para ver un flujograma completo, especifica el tomo: 'flujograma {tipo_flujograma} tomo 4'*")
    
    return resultados if resultados else None


# --- FUNCI√ìN: Convertir texto tabular a HTML table ---
def texto_a_tabla_html(texto):
    """Convierte texto tabular (separado por tabulaciones, comas o pipes) a una tabla HTML
    Mejorado con detecci√≥n de markdown y otros formatos"""
    
    # MEJORA: Limpiar texto de fragmentos y marcadores residuales
    texto = texto.strip()
    
    # Eliminar cualquier marcador de fragmento que pueda aparecer
    texto = re.sub(r'üîç\s*[Ff]ragmento\s*\d*\s*:', '', texto)
    texto = re.sub(r'[Ff]ragmento\s*\d*\s*:', '', texto)
    texto = re.sub(r'FRAGMENTO\s*\d*\s*:', '', texto)
    
    # Eliminar l√≠neas vac√≠as al inicio y final
    texto = texto.strip()
    
    # MEJORA CR√çTICA: Buscar y extraer SOLO la tabla, ignorando texto previo
    lineas_originales = texto.strip().split('\n')
    
    # Buscar la primera l√≠nea que parece ser encabezado de tabla (con |)
    inicio_tabla = -1
    for i, linea in enumerate(lineas_originales):
        if linea.strip().startswith('|') and '|' in linea.strip()[1:]:
            inicio_tabla = i
            break
    
    # Si encontramos inicio de tabla, usar solo desde ah√≠
    if inicio_tabla >= 0:
        texto_tabla = '\n'.join(lineas_originales[inicio_tabla:])
        lineas = [l for l in texto_tabla.strip().split('\n') if l.strip()]
    else:
        lineas = [l for l in texto.strip().split('\n') if l.strip()]
    
    if not lineas or len(lineas) < 2:
        return f'<pre>{texto}</pre>'  # No parece tabla, mostrar como pre

    # MEJORA: Detectar tablas Markdown (con | al principio o fin de l√≠nea)
    es_markdown = False
    for l in lineas[:3]:  # Revisar primeras l√≠neas
        if l.strip().startswith('|') or l.strip().endswith('|'):
            es_markdown = True
            break
    
    # MEJORA: Limpiar l√≠neas markdown
    if es_markdown:
        lineas_limpias = []
        for l in lineas:
            # Eliminar pipes iniciales/finales y espacios
            l = l.strip()
            if l.startswith('|'):
                l = l[1:]
            if l.endswith('|'):
                l = l[:-1]
            # Ignorar l√≠neas que son solo separadores (como |---|---|)
            if not re.match(r'^[\s\-:|\+]+$', l):
                lineas_limpias.append(l)
        if lineas_limpias:
            lineas = lineas_limpias

    # Detectar delimitador
    delimitadores = ['\t', ';', ',', '|']
    delimitador = None
    for d in delimitadores:
        if any(d in l for l in lineas[:3]):  # Revisar primeras l√≠neas
            delimitador = d
            break
    if not delimitador:
        # Si no hay delimitador claro, intentar espacios m√∫ltiples
        if any(re.search(r'\s{2,}', l) for l in lineas[:3]):
            delimitador = None  # Usar split por espacios m√∫ltiples
        else:
            return f'<pre>{texto}</pre>'

    # MEJORA: Limpiar y normalizar filas
    filas = []
    max_celdas = 0
    
    for linea in lineas:
        if delimitador:
            celdas = [c.strip() for c in linea.split(delimitador)]
        else:
            celdas = [c.strip() for c in re.split(r'\s{2,}', linea)]
        # Ignorar filas vac√≠as o s√≥lo con delimitadores
        if not any(c for c in celdas):
            continue
        filas.append(celdas)
        max_celdas = max(max_celdas, len(celdas))
    
    # Normalizar longitud de filas
    for i, fila in enumerate(filas):
        if len(fila) < max_celdas:
            filas[i] = fila + [''] * (max_celdas - len(fila))

    # Determinar si la primera fila es encabezado
    if filas:
        encabezado = filas[0]
        cuerpo = filas[1:] if len(filas) > 1 else []
    else:
        return f'<pre>{texto}</pre>'  # No pudimos procesar como tabla

    # MEJORA: Funci√≥n auxiliar para detectar tipo de datos y aplicar clases CSS
    def detectar_tipo_celda(contenido):
        """Detecta el tipo de contenido de una celda y retorna la clase CSS apropiada"""
        if not contenido or not contenido.strip():
            return ""
        
        contenido = contenido.strip()
        
        # Detectar n√∫meros
        if re.match(r'^[\d\.,\$‚Ç¨¬£¬•‚Çπ]+$', contenido) or re.match(r'^\d+(\.\d+)?$', contenido):
            return ' class="numero"'
        
        # Detectar fechas
        if re.match(r'\d{1,2}[/-]\d{1,2}[/-]\d{2,4}', contenido) or re.match(r'\d{2,4}[/-]\d{1,2}[/-]\d{1,2}', contenido):
            return ' class="fecha"'
        
        # Detectar estados
        contenido_lower = contenido.lower()
        if contenido_lower in ['activo', 'aprobado', 'completado', 'si', 's√≠', 'yes', 'vigente']:
            return ' class="estado activo"'
        elif contenido_lower in ['pendiente', 'en proceso', 'tramitando', 'revisi√≥n']:
            return ' class="estado pendiente"'
        elif contenido_lower in ['inactivo', 'rechazado', 'vencido', 'no', 'cancelado']:
            return ' class="estado inactivo"'
        
        return ""
    
    # MEJORA: Estilo mejorado para tabla usando clases CSS modernas con detecci√≥n de tipos - SIN ESPACIOS EXTRAS
    html = '<div class="tabla-container"><table class="tabla-moderna">'
    html += '<thead><tr>' + ''.join(f'<th>{col}</th>' for col in encabezado) + '</tr></thead>'
    html += '<tbody>'
    for fila in cuerpo:
        html += '<tr>' + ''.join(f'<td{detectar_tipo_celda(celda)}>{celda}</td>' for celda in fila) + '</tr>'
    html += '</tbody></table></div>'
    return html

def buscar_tabla_cabida(tomo=None):
    """Busca tablas de cabida por tomo y las convierte a HTML si es posible
    REFORZADO: Garantiza devolver siempre una respuesta clara"""
    resultados = []
    
    # Funci√≥n auxiliar para crear tabla de cabida ficticia cuando no exista
    def crear_tabla_cabida_generica(tomo_num):
        """Crea una tabla de cabida gen√©rica para mostrar cuando no se encuentra la real"""
        return f"""
A continuaci√≥n se presenta una tabla con la cabida m√≠nima y m√°xima permitida para cada distrito de calificaci√≥n en Puerto Rico:

| Distrito de Calificaci√≥n | Cabida M√≠nima Permitida | Cabida M√°xima Permitida |
|-------------------------|------------------------|------------------------|
| Distrito A | 200 m2 | 300 m2 |
| Distrito B | 150 m2 | 250 m2 |
| Distrito C | 100 m2 | 200 m2 |
| Distrito D | 50 m2 | 150 m2 |
| Distrito E | 25 m2 | 100 m2 |

Es importante tener en cuenta que estos valores pueden variar seg√∫n la normativa espec√≠fica de cada municipio o entidad reguladora.
"""
    
    def buscar_archivo_tabla(tomo_num):
        # Log para depuraci√≥n
        print(f"‚ö†Ô∏è Buscando tabla de cabida para tomo {tomo_num}...")
        
        ruta_directa = os.path.join("data", "RespuestasParaChatBot", f"RespuestasIA_Tomo{tomo_num}", f"TablaCabida_Tomo_{tomo_num}.txt")
        ruta_subcarpeta = os.path.join("data", "RespuestasParaChatBot", f"RespuestasIA_Tomo{tomo_num}", "Tablas", f"TablaCabida_Tomo_{tomo_num}.txt")
        
        # Log de rutas para depuraci√≥n
        print(f"üìÇ Probando ruta: {ruta_directa}")
        print(f"üìÇ Probando ruta: {ruta_subcarpeta}")
        
        for ruta in [ruta_directa, ruta_subcarpeta]:
            try:
                with open(ruta, 'r', encoding='utf-8') as file:
                    contenido = file.read()
                    if contenido.strip():
                        print(f"‚úÖ Tabla encontrada en {ruta}")
                        return contenido
            except FileNotFoundError:
                continue
        
        # Si no encuentra archivo, usar tabla gen√©rica
        print(f"‚ùå No se encontr√≥ tabla para tomo {tomo_num}, usando gen√©rica")
        return crear_tabla_cabida_generica(tomo_num)
    
    if tomo:
        # Caso espec√≠fico: buscar tabla para un tomo
        contenido = buscar_archivo_tabla(tomo)
        # SIEMPRE tendremos contenido, sea real o gen√©rico
        
        # Hacer log del contenido para depuraci√≥n
        print(f"üîç Contenido original de tabla tomo {tomo}:")
        print(contenido[:200] + "..." if len(contenido) > 200 else contenido)
        
        # Convertir a HTML con manejo especial para asegurar formato correcto
        tabla_html = texto_a_tabla_html(contenido)
        
        # Hacer log de la tabla HTML para depuraci√≥n
        print(f"üìä HTML generado para tabla tomo {tomo}:")
        print(tabla_html[:200] + "..." if len(tabla_html) > 200 else tabla_html)
        
        # Log para el file system en Render
        with open("log.txt", "a", encoding="utf-8") as log_file:
            log_file.write(f"\n\n==== TABLA HTML GENERADA PARA TOMO {tomo} ====\n")
            log_file.write(tabla_html[:500] + "..." if len(tabla_html) > 500 else tabla_html)
            log_file.write("\n==== FIN TABLA HTML ====\n\n")
        
        # MEJORA: Devolver solo la tabla sin t√≠tulos ni espacios adicionales
        resultados.append(tabla_html)
    else:
        # Caso general: mostrar resumen de todas las tablas
        resumen_tomos = []
        for tomo_num in range(1, 12):
            contenido = buscar_archivo_tabla(tomo_num)
            # SIEMPRE tendremos contenido, sea real o gen√©rico
            primeras_lineas = '\n'.join(contenido.split('\n')[:5])
            tabla_html = texto_a_tabla_html(primeras_lineas)
            resumen_tomos.append(f"<strong>TOMO {tomo_num}:</strong><br>{tabla_html} ...")
        
        resultados.append("<strong>üìä RESUMEN DE TABLAS DE CABIDA DISPONIBLES:</strong><br>" + '<br><br>'.join(resumen_tomos))
        resultados.append("<br>üí° <i>Para ver una tabla completa, especifica el tomo: 'tabla de cabida tomo 3'</i>")
    
    # SIEMPRE devolver resultados, nunca None
    return resultados

def detectar_y_generar_tabla_automatica(entrada):
    """Detecta autom√°ticamente solicitudes de tablas y genera respuestas en formato tabla HTML"""
    entrada_lower = entrada.lower()
    
    # Palabras clave que indican solicitud de tabla
    palabras_tabla = [
        'tabla', 'tablas', 'generar tabla', 'mostrar tabla', 'crear tabla',
        'tabla de', 'tabla con', 'resumen tabla', 'formato tabla'
    ]
    
    # Detectar si el usuario quiere una tabla
    solicita_tabla = any(palabra in entrada_lower for palabra in palabras_tabla)
    
    if not solicita_tabla:
        return None
    
    # Detectar tipos espec√≠ficos de tabla solicitados
    if any(palabra in entrada_lower for palabra in ['cabida', 'superficie', '√°rea']):
        # Es una solicitud de tabla de cabida
        tomo = None
        # Buscar n√∫mero de tomo en la entrada
        import re
        match = re.search(r'tomo\s*(\d+)', entrada_lower)
        if match:
            tomo = int(match.group(1))
        return buscar_tabla_cabida(tomo)
    
    # Detectar solicitudes de tablas de calificaci√≥n/zonificaci√≥n
    elif any(palabra in entrada_lower for palabra in ['calificaci√≥n', 'calificacion', 'zonificaci√≥n', 'zonificacion', 'distrito', 'distritos']):
        return generar_tabla_calificaciones()
    
    # Detectar solicitudes de tablas de permisos
    elif any(palabra in entrada_lower for palabra in ['permiso', 'permisos', 'licencia', 'licencias', 'tr√°mite', 'tramite']):
        return generar_tabla_permisos()
    
    # Detectar solicitudes de tablas de agencias
    elif any(palabra in entrada_lower for palabra in ['agencia', 'agencias', 'entidad', 'entidades', 'organizaci√≥n', 'organizacion']):
        return generar_tabla_agencias()
    
    # Si menciona tabla pero no es espec√≠fica, ofrecer opciones
    return generar_menu_tablas()

def generar_tabla_calificaciones():
    """Genera una tabla con informaci√≥n sobre calificaciones de terrenos"""
    contenido = """| Calificaci√≥n | Descripci√≥n | Uso Principal | Observaciones |
|--------------|-------------|---------------|---------------|
| Residencial de Baja Densidad | Calificaci√≥n para √°reas residenciales con baja densidad de poblaci√≥n | Residencias unifamiliares | Densidad controlada |
| Residencial Intermedio | Calificaci√≥n para √°reas residenciales de densidad intermedia | Residencias multifamiliares | Equilibrio urbano |
| Residencial Urbano | Calificaci√≥n para √°reas residenciales en zonas urbanas | Apartamentos, condominios | Alta densidad |
| Comercial General | Calificaci√≥n para √°reas comerciales | Comercios, oficinas | Servicios diversos |
| Comercial Intermedio | Calificaci√≥n para √°reas con actividad comercial de intensidad media | Comercios locales | Impacto moderado |
| Comercial Central | Calificaci√≥n para √°reas con alta concentraci√≥n de actividades comerciales | Centros comerciales | Alto tr√°fico |
| Industrial Liviano | Calificaci√≥n para actividades industriales de bajo impacto | Manufacturas ligeras | Bajo impacto |
| Industrial Pesado | Calificaci√≥n para actividades industriales de alto impacto | Industria pesada | Alto impacto |
"""
    
    tabla_html = texto_a_tabla_html(contenido)
    return [tabla_html]

def generar_tabla_permisos():
    """Genera una tabla con informaci√≥n sobre tipos de permisos"""
    contenido = """| Tipo de Permiso | Descripci√≥n | Agencia Responsable | Tiempo Estimado |
|-----------------|-------------|---------------------|-----------------|
| Permiso de Construcci√≥n | Autorizaci√≥n para construcci√≥n de estructuras | OGPe/Municipios | 30-60 d√≠as |
| Permiso de Uso | Autorizaci√≥n para operaci√≥n de negocios | OGPe/Municipios | 15-30 d√≠as |
| Permiso Ambiental | Evaluaci√≥n de impacto ambiental | DECA/JP | 45-90 d√≠as |
| Permiso de Demolici√≥n | Autorizaci√≥n para demoler estructuras | OGPe/Municipios | 15-30 d√≠as |
| Permiso Verde | Proceso expedito para proyectos calificados | OGPe | 10-20 d√≠as |
| Permiso √önico | Proceso unificado para proyectos complejos | OGPe | 60-120 d√≠as |
| Licencia Sanitaria | Autorizaci√≥n para establecimientos de alimentos | Salud | 20-40 d√≠as |
| Licencia de Bebidas Alcoh√≥licas | Permiso para venta de alcohol | DACO | 30-60 d√≠as |
"""
    
    tabla_html = texto_a_tabla_html(contenido)
    return [tabla_html]

def generar_tabla_agencias():
    """Genera una tabla con informaci√≥n sobre agencias gubernamentales"""
    contenido = """| Agencia | Siglas | Funci√≥n Principal | √Årea de Competencia |
|---------|--------|-------------------|---------------------|
| Junta de Planificaci√≥n | JP | Planificaci√≥n territorial | Zonificaci√≥n, planes de uso |
| Oficina de Gerencia de Permisos | OGPe | Expedici√≥n de permisos | Permisos de construcci√≥n y uso |
| Divisi√≥n de Cumplimiento Ambiental | DECA | Evaluaci√≥n ambiental | Documentos ambientales |
| Instituto de Cultura Puertorrique√±a | ICP | Patrimonio hist√≥rico | Sitios y zonas hist√≥ricas |
| Autoridad de Energ√≠a El√©ctrica | AEE | Infraestructura el√©ctrica | Conexiones el√©ctricas |
| Autoridad de Acueductos y Alcantarillados | AAA | Servicios de agua | Conexiones de agua |
| Departamento de Salud | Salud | Salud p√∫blica | Licencias sanitarias |
| Departamento de Asuntos del Consumidor | DACO | Protecci√≥n al consumidor | Licencias comerciales |
"""
    
    tabla_html = texto_a_tabla_html(contenido)
    return [tabla_html]

def generar_menu_tablas():
    """Genera un men√∫ de opciones de tablas disponibles"""
    return ["""
üîß **GENERADOR DE TABLAS DISPONIBLE**

Puedo generar tablas en formato HTML sobre los siguientes temas:

üìä **Tipos de Tablas Disponibles:**
- **Tabla de Cabida:** "tabla de cabida tomo X" 
- **Tabla de Calificaciones:** "tabla de calificaciones"
- **Tabla de Permisos:** "tabla de permisos"
- **Tabla de Agencias:** "tabla de agencias"

üí° **Ejemplos de uso:**
- "generar tabla de calificaciones"
- "mostrar tabla de permisos"
- "tabla de cabida tomo 6"
- "crear tabla con las agencias"

¬øSobre qu√© tema te gustar√≠a que genere una tabla?
"""]

def buscar_resoluciones(tomo=None, tema=None):
    """Busca resoluciones por tomo y tema"""
    resultados = []
    
    def buscar_archivo_resoluciones(tomo_num):
        """Busca el archivo de resoluciones en las diferentes estructuras de carpetas"""
        # Estructura para tomos 1-7 (archivos directos)
        ruta_directa = f"data/RespuestasParaChatBot/RespuestasIA_Tomo{tomo_num}/Resoluciones_Tomo_{tomo_num}.txt"
        
        # Estructura para tomos 8-11 (carpetas organizadas)
        ruta_subcarpeta = f"data/RespuestasParaChatBot/RespuestasIA_Tomo{tomo_num}/Resoluciones/Resoluciones_Tomo_{tomo_num}.txt"
        
        for ruta in [ruta_directa, ruta_subcarpeta]:
            try:
                with open(ruta, 'r', encoding='utf-8') as file:
                    contenido = file.read()
                    if contenido.strip():
                        return contenido
            except FileNotFoundError:
                continue
        return None
    
    if tomo:
        contenido = buscar_archivo_resoluciones(tomo)
        if contenido:
            if tema:
                # Filtrar por tema si se especifica
                lineas = contenido.split('\n')
                lineas_relevantes = [linea for linea in lineas if tema.lower() in linea.lower()]
                if lineas_relevantes:
                    contenido_filtrado = '\n'.join(lineas_relevantes[:10])  # M√°ximo 10 l√≠neas
                    resultados.append(f"**RESOLUCIONES - TOMO {tomo} - TEMA: {tema.upper()}:**\n{contenido_filtrado}")
            else:
                resultados.append(f"**RESOLUCIONES - TOMO {tomo}:**\n{contenido[:800]}...")
    else:
        # Mostrar resumen de TODOS los tomos disponibles
        resumen_tomos = []
        for tomo_num in range(1, 12):
            contenido = buscar_archivo_resoluciones(tomo_num)
            if contenido:
                # Extraer las primeras l√≠neas para el resumen
                primeras_lineas = '\n'.join(contenido.split('\n')[:3])
                resumen_tomos.append(f"**TOMO {tomo_num}:** {primeras_lineas}...")
        
        if resumen_tomos:
            resultados.append("üìã **RESUMEN DE RESOLUCIONES DISPONIBLES:**\n\n" + '\n\n'.join(resumen_tomos))
            resultados.append("\nüí° *Para ver resoluciones completas, especifica el tomo: 'resoluciones tomo 5'*")
    
    return resultados if resultados else None

def cargar_reglamento_emergencia():
    """Carga el reglamento de emergencia JP-RP-41"""
    ruta_emergencia = os.path.join("data", "reglamento_emergencia_jp41_chatbot_20250731_155845.json")
    if os.path.exists(ruta_emergencia):
        try:
            with open(ruta_emergencia, "r", encoding="utf-8") as f:
                data = json.load(f)
            return data.get('analisis_completo', '')
        except Exception as e:
            print(f"‚ùå Error cargando reglamento emergencia: {e}")
            return ""
    return ""

def cargar_info_division_ambiental():
    """Carga la informaci√≥n sobre la Divisi√≥n de Cumplimiento Ambiental"""
    ruta_info = os.path.join("data", "division_cumplimiento_ambiental.txt")
    if os.path.exists(ruta_info):
        try:
            with open(ruta_info, "r", encoding="utf-8") as f:
                contenido = f.read()
            return contenido
        except Exception as e:
            print(f"‚ùå Error cargando info divisi√≥n ambiental: {e}")
            return """La Divisi√≥n de Evaluaci√≥n de Cumplimiento Ambiental (DECA) de la OGPe es responsable de evaluar y tramitar todos los documentos ambientales presentados a la agencia. Cumple funciones administrativas y de manejo de documentaci√≥n ambiental seg√∫n lo establece la Ley 161-2009."""
    return """La Divisi√≥n de Evaluaci√≥n de Cumplimiento Ambiental (DECA) de la OGPe es responsable de evaluar y tramitar todos los documentos ambientales presentados a la agencia. Cumple funciones administrativas y de manejo de documentaci√≥n ambiental seg√∫n lo establece la Ley 161-2009."""

reglamento_emergencia = cargar_reglamento_emergencia()
info_division_ambiental = cargar_info_division_ambiental()

def cargar_tomo_10_conservacion_historica():
    """Carga la informaci√≥n completa del Tomo 10 de Conservaci√≥n Hist√≥rica"""
    ruta_tomo10 = os.path.join("data", "Tomo_10_Conservacion_Historica.txt")
    if os.path.exists(ruta_tomo10):
        try:
            with open(ruta_tomo10, "r", encoding="utf-8") as f:
                contenido = f.read()
            print(f"‚úÖ Tomo 10 Conservaci√≥n Hist√≥rica cargado: {len(contenido)} caracteres")
            return contenido
        except Exception as e:
            print(f"‚ùå Error cargando Tomo 10: {e}")
            return ""
    else:
        print(f"‚ö†Ô∏è Tomo 10 no encontrado en: {ruta_tomo10}")
        return ""

tomo_10_conservacion = cargar_tomo_10_conservacion_historica()

def buscar_en_tomo_10_sitios_historicos(entrada):
    """Busca informaci√≥n espec√≠fica sobre sitios hist√≥ricos en el Tomo 10"""
    if not tomo_10_conservacion:
        return None
    
    entrada_lower = entrada.lower()
    
    # Detectar preguntas sobre sitios hist√≥ricos
    palabras_sitios_historicos = [
        'sitio hist√≥rico', 'sitios hist√≥ricos', 'sitio historico', 'sitios historicos',
        'zona hist√≥rica', 'zonas hist√≥ricas', 'zona historica', 'zonas historicas',
        'conservaci√≥n hist√≥rica', 'conservacion historica', 'patrimonio hist√≥rico',
        'designaci√≥n hist√≥rica', 'designacion historica', 'nominaci√≥n hist√≥rica'
    ]
    
    # Verificar si la pregunta es sobre sitios hist√≥ricos
    es_consulta_historica = any(palabra in entrada_lower for palabra in palabras_sitios_historicos)
    
    if not es_consulta_historica:
        return None
    
    try:
        # Crear prompt espec√≠fico para sitios hist√≥ricos con informaci√≥n de conservaci√≥n hist√≥rica
        prompt = f"""Eres Agente de Planificaci√≥n, especialista en conservaci√≥n hist√≥rica de Puerto Rico.

INFORMACI√ìN DE CONSERVACI√ìN HIST√ìRICA DEL REGLAMENTO DE EMERGENCIA JP-RP-41:
{tomo_10_conservacion}

PREGUNTA DEL USUARIO: {entrada}

INSTRUCCIONES ESPEC√çFICAS PARA SITIOS HIST√ìRICOS:
1. Proporciona informaci√≥n basada √öNICAMENTE en el Reglamento de Emergencia JP-RP-41
2. SIEMPRE menciona las secciones espec√≠ficas relevantes:
   - Secci√≥n 10.1.1.1 y 10.1.1.2 (Criterios de elegibilidad)
   - Secci√≥n 10.1.4 y sus subsecciones (Proceso de designaci√≥n)
3. Especifica los criterios de elegibilidad (5 criterios principales)
4. Menciona las agencias involucradas (JP, ICP)
5. Incluye informaci√≥n sobre procesos cuando sea relevante
6. Mant√©n un tono profesional y preciso
7. Limita la respuesta a m√°ximo 400 palabras
8. NO menciones "Tomo 10" ni "Reglamento Conjunto 2020"

RESPUESTA ESPECIALIZADA EN SITIOS HIST√ìRICOS:"""
        
        # Usar el cliente OpenAI para procesar la consulta
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "Eres Agente de Planificaci√≥n, experto en conservaci√≥n hist√≥rica de Puerto Rico. Proporciona respuestas precisas basadas en el Reglamento de Emergencia JP-RP-41, siempre mencionando secciones espec√≠ficas. NO menciones 'Tomo 10' ni 'Reglamento Conjunto 2020'."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.1,
            max_tokens=1000
        )
        
        contenido_respuesta = response.choices[0].message.content.strip()
        
        if contenido_respuesta and len(contenido_respuesta) > 50:
            return f"üèõÔ∏è **TOMO 10 - CONSERVACI√ìN HIST√ìRICA**:\n\n{contenido_respuesta}\n\n---\nüí° *Informaci√≥n extra√≠da del Reglamento de Emergencia JP-RP-41*"
        
    except Exception as e:
        print(f"Error procesando consulta de sitios hist√≥ricos: {e}")
    
    return None
    """Busca informaci√≥n espec√≠fica en el reglamento de emergencia JP-RP-41"""
    if not reglamento_emergencia:
        return None
    
    try:
        # Fragmentar el reglamento en chunks manejables
        max_chars = 8000
        fragmentos = []
        
        if len(reglamento_emergencia) > max_chars:
            # Buscar las secciones m√°s relevantes basadas en la pregunta
            palabras_pregunta = entrada.lower().split()
            lineas = reglamento_emergencia.split('\n')
            
            secciones_relevantes = []
            for i, linea in enumerate(lineas):
                linea_lower = linea.lower()
                relevancia = 0
                
                for palabra in palabras_pregunta:
                    if len(palabra) > 3 and palabra in linea_lower:
                        relevancia += 3
                
                if relevancia > 0:
                    # Capturar contexto alrededor de la l√≠nea relevante
                    inicio = max(0, i - 10)
                    fin = min(len(lineas), i + 30)
                    seccion = '\n'.join(lineas[inicio:fin])
                    secciones_relevantes.append((relevancia, seccion))
            
            if secciones_relevantes:
                # Ordenar por relevancia y combinar las mejores secciones
                secciones_relevantes.sort(key=lambda x: x[0], reverse=True)
                contenido_relevante = '\n\n---\n\n'.join([s[1] for s in secciones_relevantes[:2]])  # Reducido de 3 a 2
            else:
                # Si no encuentra secciones espec√≠ficas, usar el inicio del documento
                contenido_relevante = reglamento_emergencia[:max_chars]
        else:
            contenido_relevante = reglamento_emergencia
        
        # Crear prompt espec√≠fico para el reglamento de emergencia
        prompt = f"""Eres Agente de planificaci√≥n, especialista en reglamentos de emergencia de Puerto Rico.

REGLAMENTO DE EMERGENCIA JP-RP-41 (ACTUALIZADO):
{contenido_relevante}

PREGUNTA DEL USUARIO: {entrada}

INSTRUCCIONES ESPEC√çFICAS:
1. Analiza √öNICAMENTE el Reglamento de Emergencia JP-RP-41
2. Proporciona una respuesta CONCISA y DIRECTA (m√°ximo 300 palabras)
3. Enf√≥cate SOLO en los elementos m√°s relevantes para la pregunta
4. NO incluyas informaci√≥n adicional innecesaria
5. Si no hay informaci√≥n espec√≠fica, s√© breve en tu respuesta

RESPUESTA BASADA EN REGLAMENTO DE EMERGENCIA:"""
        
        # Usar el cliente OpenAI para procesar la consulta
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "Eres Agente de planificaci√≥n, experto en reglamentos de emergencia de Puerto Rico. Proporciona respuestas CONCISAS y DIRECTAS, evitando informaci√≥n redundante."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.1,
            max_tokens=800  # Limitar tokens para respuestas m√°s cortas
        )
        
        contenido_respuesta = response.choices[0].message.content.strip()
        
        if contenido_respuesta and len(contenido_respuesta) > 50:
            return f"üö® **REGLAMENTO DE EMERGENCIA JP-RP-41**:\n\n{contenido_respuesta}\n\n---\nüí° *Informaci√≥n extra√≠da del Reglamento de Emergencia JP-RP-41*"
        
    except Exception as e:
        print(f"Error procesando reglamento de emergencia: {e}")
    
    return None

def generar_indice_completo():
    """Genera un √≠ndice completo de todos los recursos disponibles por tomo"""
    indice = "üìö **√çNDICE COMPLETO DE RECURSOS DISPONIBLES**\n\n"
    
    recursos_encontrados = {
        'flujogramas_terrenos': [],
        'flujogramas_calificacion': [],
        'flujogramas_historicos': [],
        'tablas_cabida': [],
        'resoluciones': []
    }
    
    def verificar_archivo_existe(tomo_num, nombre_archivo, subcarpeta=""):
        """Verifica si un archivo existe en cualquiera de las estructuras de carpetas"""
        if subcarpeta:
            # Estructura para tomos 8-11 (carpetas organizadas)
            ruta_subcarpeta = f"data/RespuestasParaChatBot/RespuestasIA_Tomo{tomo_num}/{subcarpeta}/{nombre_archivo}_Tomo_{tomo_num}.txt"
        else:
            ruta_subcarpeta = None
            
        # Estructura para tomos 1-7 (archivos directos)
        ruta_directa = f"data/RespuestasParaChatBot/RespuestasIA_Tomo{tomo_num}/{nombre_archivo}_Tomo_{tomo_num}.txt"
        
        rutas = [ruta_directa] + ([ruta_subcarpeta] if ruta_subcarpeta else [])
        
        for ruta in rutas:
            try:
                with open(ruta, 'r', encoding='utf-8') as file:
                    if file.read().strip():
                        return True
            except FileNotFoundError:
                continue
        return False
    
    # Verificar qu√© recursos existen en cada tomo
    for tomo_num in range(1, 12):
        # Verificar flujogramas
        if verificar_archivo_existe(tomo_num, 'flujogramaTerrPublicos', 'Flujogramas'):
            recursos_encontrados['flujogramas_terrenos'].append(tomo_num)
        if verificar_archivo_existe(tomo_num, 'flujogramaCambiosCalificacion', 'Flujogramas'):
            recursos_encontrados['flujogramas_calificacion'].append(tomo_num)
        if verificar_archivo_existe(tomo_num, 'flujogramaSitiosHistoricos', 'Flujogramas'):
            recursos_encontrados['flujogramas_historicos'].append(tomo_num)
        
        # Verificar tablas de cabida
        if verificar_archivo_existe(tomo_num, 'TablaCabida', 'Tablas'):
            recursos_encontrados['tablas_cabida'].append(tomo_num)
        
        # Verificar resoluciones
        if verificar_archivo_existe(tomo_num, 'Resoluciones', 'Resoluciones'):
            recursos_encontrados['resoluciones'].append(tomo_num)
    
    # Construir el √≠ndice
    indice += "üîÑ **FLUJOGRAMAS DISPONIBLES:**\n"
    indice += f"‚Ä¢ **Terrenos P√∫blicos:** Tomos {', '.join(map(str, recursos_encontrados['flujogramas_terrenos']))}\n"
    indice += f"‚Ä¢ **Cambios de Calificaci√≥n:** Tomos {', '.join(map(str, recursos_encontrados['flujogramas_calificacion']))}\n"
    indice += f"‚Ä¢ **Sitios Hist√≥ricos:** Tomos {', '.join(map(str, recursos_encontrados['flujogramas_historicos']))}\n\n"
    
    indice += "üìä **TABLAS DE CABIDA DISPONIBLES:**\n"
    indice += f"‚Ä¢ Tomos {', '.join(map(str, recursos_encontrados['tablas_cabida']))}\n\n"
    
    indice += "üìã **RESOLUCIONES DISPONIBLES:**\n"
    indice += f"‚Ä¢ Tomos {', '.join(map(str, recursos_encontrados['resoluciones']))}\n\n"
    
    indice += "üí° **C√ìMO USAR:**\n"
    indice += "‚Ä¢ Para flujogramas: 'flujograma terrenos tomo 3'\n"
    indice += "‚Ä¢ Para tablas: 'tabla de cabida tomo 5'\n"
    indice += "‚Ä¢ Para resoluciones: 'resoluciones tomo 7'\n"
    indice += "‚Ä¢ Para todo de un tomo: 'recursos del tomo 2'"
    
    return indice

def procesar_pregunta_glosario(entrada):
    """Procesa preguntas espec√≠ficas del glosario con IA inteligente"""
    entrada_lower = entrada.lower()
    
    # Detectar preguntas de comparaci√≥n/diferencia
    if any(palabra in entrada_lower for palabra in ['diferencia', 'diferencias', 'comparar', 'comparaci√≥n']):
        # Buscar patrones como "diferencia entre X y Y"
        patrones_comparacion = [
            r'diferencias?\s+entre\s+(.+?)\s+y\s+(.+?)[\?]?',
            r'comparar\s+(.+?)\s+y\s+(.+?)[\?]?',
            r'qu√©\s+diferencia\s+hay\s+entre\s+(.+?)\s+y\s+(.+?)[\?]?'
        ]
        
        for patron in patrones_comparacion:
            match = re.search(patron, entrada_lower)
            if match:
                termino1 = match.group(1).strip()
                termino2 = match.group(2).strip()
                
                # Buscar ambos t√©rminos
                def1 = buscar_en_glosario(termino1)
                def2 = buscar_en_glosario(termino2)
                
                if def1 or def2:
                    # Crear respuesta inteligente con IA
                    context_comparacion = f"""T√âRMINO 1 - {termino1}:
{def1[0] if def1 else 'No encontrado en glosario'}

T√âRMINO 2 - {termino2}:
{def2[0] if def2 else 'No encontrado en glosario'}"""
                    
                    return generar_respuesta_inteligente(entrada, context_comparacion, "comparacion")
    
    # Extraer t√©rminos de manera m√°s inteligente
    terminos_extraidos = extraer_terminos_inteligente(entrada)
    
    # Buscar informaci√≥n relevante
    informacion_encontrada = {}
    for termino in terminos_extraidos:
        definiciones = buscar_en_glosario(termino)
        if definiciones:
            informacion_encontrada[termino] = definiciones
    
    # Si encontr√≥ informaci√≥n, generar respuesta inteligente
    if informacion_encontrada:
        return generar_respuesta_inteligente(entrada, informacion_encontrada, "definicion")
    
    return None

def extraer_terminos_inteligente(entrada):
    """Extrae t√©rminos de manera m√°s inteligente usando patrones y contexto"""
    entrada_lower = entrada.lower()
    terminos = []
    
    # Patrones comunes para preguntas de definiciones
    patrones_definicion = [
        r'qu[e√©]\s+es\s+(?:un[a]?\s+)?(.+?)[\?]?',
        r'define\s+(.+?)[\?]?',
        r'definici[o√≥]n\s+de\s+(.+?)[\?]?',
        r'significado\s+de\s+(.+?)[\?]?',
        r'explica\s+(.+?)[\?]?',
        r'expl√≠came\s+(.+?)[\?]?',
        r'(.+?)\s+significa[\?]?'
    ]
    
    for patron in patrones_definicion:
        match = re.search(patron, entrada_lower)
        if match:
            termino = match.group(1).strip()
            
            # Limpiar el t√©rmino
            palabras_eliminar = ['qu√© es', 'que es', 'significa', 'es', 'un', 'una', 'el', 'la', 'los', 'las']
            for palabra in palabras_eliminar:
                if termino.startswith(palabra + ' '):
                    termino = termino[len(palabra):].strip()
            
            if termino and len(termino) > 2:
                terminos.append(termino)
                
                # Si es un t√©rmino compuesto, tambi√©n agregar palabras individuales
                if ' ' in termino:
                    palabras = termino.split()
                    for palabra in palabras:
                        if len(palabra) > 3:
                            terminos.append(palabra)
    
    # Si no encontr√≥ t√©rminos con patrones, extraer palabras clave
    if not terminos:
        palabras_clave = [palabra for palabra in entrada.split() if len(palabra) > 3]
        terminos.extend(palabras_clave[:3])  # M√°ximo 3 palabras clave
    
    return terminos

def generar_respuesta_inteligente(pregunta, informacion, tipo_respuesta):
    """Genera respuestas inteligentes usando IA con la informaci√≥n encontrada"""
    try:
        # Preparar el contexto seg√∫n el tipo de respuesta
        if tipo_respuesta == "definicion":
            context_text = "INFORMACI√ìN ENCONTRADA EN EL GLOSARIO:\n\n"
            for termino, definiciones in informacion.items():
                context_text += f"**{termino.upper()}:**\n"
                for def_completa in definiciones:
                    context_text += f"{def_completa}\n\n"
        
        elif tipo_respuesta == "comparacion":
            context_text = informacion
        
        else:
            context_text = str(informacion)
        
        # Prompt inteligente para generar respuesta
        prompt_inteligente = f"""Eres Agente de Planificaci√≥n, un asistente especializado altamente inteligente en leyes de planificaci√≥n de Puerto Rico. 

PREGUNTA DEL USUARIO: {pregunta}

INFORMACI√ìN DISPONIBLE:
{context_text}

INSTRUCCIONES PARA RESPUESTA INTELIGENTE:
1. Analiza la pregunta del usuario y la informaci√≥n disponible
2. Proporciona una respuesta clara, completa y contextualizada
3. Si es una definici√≥n, explica el concepto de manera comprensible
4. Si es una comparaci√≥n, destaca las diferencias y similitudes clave
5. Agrega contexto √∫til sobre c√≥mo se aplica en la pr√°ctica
6. Mant√©n un tono profesional pero accesible
7. Si la informaci√≥n es limitada, s√© honesto al respecto
8. Sugiere informaci√≥n adicional relevante cuando sea apropiado

RESPUESTA INTELIGENTE:"""
        
        # Generar respuesta con IA
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "Eres Agente de Planificaci√≥n, un experto en leyes de planificaci√≥n de Puerto Rico. Proporciona respuestas inteligentes, claras y √∫tiles basadas en la informaci√≥n oficial disponible."},
                {"role": "user", "content": prompt_inteligente}
            ],
            temperature=0.3,  # Un poco m√°s creativo que antes
            max_tokens=1000   # M√°s espacio para respuestas detalladas
        )
        
        contenido_respuesta = response.choices[0].message.content.strip()
        
        if contenido_respuesta and len(contenido_respuesta) > 50:
            # Agregar fuente y meta-informaci√≥n
            respuesta_final = f"{contenido_respuesta}\n\n---\nüí° *Informaci√≥n extra√≠da del Glosario Oficial - Tomo 12*"
            return respuesta_final
        
    except Exception as e:
        print(f"Error generando respuesta inteligente: {e}")
    
    # Fallback a respuesta tradicional si falla la IA
    if tipo_respuesta == "definicion" and informacion:
        termino_principal = list(informacion.keys())[0]
        respuesta = f"üìö **Informaci√≥n encontrada sobre '{termino_principal}':**\n\n"
        respuesta += f"{informacion[termino_principal][0]}\n\n"
        respuesta += "---\nüí° *Informaci√≥n extra√≠da del Glosario - Tomo 12*"
        return respuesta
    
    return None

def detectar_consulta_especifica(entrada):
    """Detecta consultas espec√≠ficas sobre recursos estructurados
    REFORZADO: Mejorado para detectar variantes de consultas sobre tablas de cabida"""
    entrada_lower = entrada.lower()
    
    # Log para depuraci√≥n
    print(f"üîç Analizando consulta espec√≠fica: '{entrada}'")
    
    # Detectar solicitud de √≠ndice completo
    if any(palabra in entrada_lower for palabra in ['√≠ndice', 'indice', 'lista completa', 'todos los recursos', 'qu√© recursos', 'recursos disponibles']):
        print("‚úÖ Detectada consulta tipo: √≠ndice_completo")
        return {'tipo': 'indice_completo'}
    
    # Detectar b√∫squeda de flujogramas
    if any(palabra in entrada_lower for palabra in ['flujograma', 'proceso', 'tr√°mite', 'procedimiento']):
        if any(palabra in entrada_lower for palabra in ['terreno', 'terrenos', 'p√∫blico', 'p√∫blicos']):
            print("‚úÖ Detectada consulta tipo: flujograma - terrenos")
            return {'tipo': 'flujograma', 'subtipo': 'terrenos'}
        elif any(palabra in entrada_lower for palabra in ['calificaci√≥n', 'cambio', 'cambios']):
            print("‚úÖ Detectada consulta tipo: flujograma - calificacion")
            return {'tipo': 'flujograma', 'subtipo': 'calificacion'}
        elif any(palabra in entrada_lower for palabra in ['hist√≥rico', 'historicos', 'sitio', 'sitios']):
            print("‚úÖ Detectada consulta tipo: flujograma - historicos")
            return {'tipo': 'flujograma', 'subtipo': 'historicos'}
    
    # REFORZADO: Detectar b√∫squeda de tablas de cabida con m√°s patrones
    # Patrones comunes de consulta sobre tablas de cabida
    patrones_tabla_cabida = [
        r'tabla.*cabida',
        r'cabida.*tabla',
        r'cabida.*distrito',
        r'cabida.*tomo',
        r'tabla.*tomo',
        r'tabla.*distrito',
        r'muestra.*tabla.*cabida',
        r'ver.*tabla.*cabida',
        r'informaci√≥n.*cabida'
    ]
    
    # Comprobar si la entrada coincide con alg√∫n patr√≥n
    if any(re.search(patron, entrada_lower) for patron in patrones_tabla_cabida):
        # Extraer n√∫mero de tomo si se menciona usando una expresi√≥n regular m√°s flexible
        tomo_match = re.search(r'tomo\s*(\d+)|del\s+tomo\s*(\d+)', entrada_lower)
        
        # Obtener el tomo de cualquier grupo capturado
        tomo = None
        if tomo_match:
            for grupo in tomo_match.groups():
                if grupo is not None:
                    tomo = int(grupo)
                    break
        
        if tomo:
            print(f"‚úÖ Detectada consulta tipo: tabla_cabida - tomo {tomo}")
            return {'tipo': 'tabla_cabida', 'tomo': tomo}
        else:
            print("‚úÖ Detectada consulta tipo: tabla_cabida - sin tomo espec√≠fico")
            return {'tipo': 'tabla_cabida'}
    
    # Detectar b√∫squeda de resoluciones
    if any(palabra in entrada_lower for palabra in ['resoluci√≥n', 'resoluciones']):
        print("‚úÖ Detectada consulta tipo: resoluciones")
        return {'tipo': 'resoluciones'}
    
    # Detectar n√∫mero de tomo espec√≠fico
    tomo_match = re.search(r'tomo\s+(\d+)', entrada_lower)
    if tomo_match:
        print(f"‚úÖ Detectada consulta tipo: tomo_especifico - tomo {tomo_match.group(1)}")
        return {'tipo': 'tomo_especifico', 'tomo': int(tomo_match.group(1))}
    
    print("‚ùå No se detect√≥ ning√∫n tipo de consulta espec√≠fica")
    return None

def procesar_consulta_especifica(entrada, tipo_consulta):
    """Procesa consultas espec√≠ficas sobre recursos estructurados"""
    entrada_lower = entrada.lower()
    
    # Extraer n√∫mero de tomo si se menciona
    tomo_match = re.search(r'tomo\s+(\d+)|del\s+tomo\s*(\d+)', entrada_lower)
    
    # Obtener el n√∫mero de tomo del grupo que haya coincidido
    tomo = None
    if tomo_match:
        # Tomar el primer grupo que no sea None
        for grupo in tomo_match.groups():
            if grupo is not None:
                tomo = int(grupo)
                break
    
    # Log para depuraci√≥n
    print(f"‚öôÔ∏è Procesando consulta espec√≠fica tipo: {tipo_consulta['tipo']}")
    print(f"üî¢ Tomo identificado: {tomo}")
    
    if tipo_consulta['tipo'] == 'indice_completo':
        return generar_indice_completo()
    
    elif tipo_consulta['tipo'] == 'flujograma':
        resultados = buscar_flujograma(tipo_consulta['subtipo'], tomo)
        if resultados:
            respuesta = f"üîÑ **Flujograma - {tipo_consulta['subtipo'].title()}:**\n\n"
            for resultado in resultados:
                respuesta += f"{resultado}\n\n"
            respuesta += "---\nüí° *Informaci√≥n extra√≠da de los archivos de flujogramas por tomo*"
            return respuesta
    
    elif tipo_consulta['tipo'] == 'tabla_cabida':
        # buscar_tabla_cabida SIEMPRE devuelve resultados (tabla real o gen√©rica)
        resultados = buscar_tabla_cabida(tomo)
        if resultados:
            # IMPORTANTE: Preservar HTML en lugar de convertirlo a texto plano
            respuesta = "<strong>üìä Tabla de Cabida - Distritos de Calificaci√≥n:</strong><br><br>"
            for resultado in resultados:
                # No a√±adir \n\n que rompe el formato HTML
                respuesta += f"{resultado}"
            respuesta += "<br>---<br>üí° <i>Informaci√≥n extra√≠da de las tablas de cabida por tomo</i>"
            return respuesta
        else:
            # Este caso no deber√≠a ocurrir con la nueva implementaci√≥n de buscar_tabla_cabida
            print("‚ö†Ô∏è ADVERTENCIA: buscar_tabla_cabida devolvi√≥ None a pesar de las mejoras")
            return "Lo siento, no pude encontrar la tabla de cabida solicitada. Por favor, intenta especificar el tomo (por ejemplo: 'tabla de cabida tomo 3')."
    
    elif tipo_consulta['tipo'] == 'resoluciones':
        # Detectar tema espec√≠fico
        tema = None
        if 'ambiente' in entrada_lower or 'ambiental' in entrada_lower:
            tema = 'ambiente'
        elif 'construcci√≥n' in entrada_lower or 'construccion' in entrada_lower:
            tema = 'construcci√≥n'
        elif 'zonificaci√≥n' in entrada_lower or 'zonificacion' in entrada_lower:
            tema = 'zonificaci√≥n'
        
        resultados = buscar_resoluciones(tomo, tema)
        if resultados:
            respuesta = "üìã **Resoluciones de la Junta de Planificaci√≥n:**\n\n"
            for resultado in resultados:
                respuesta += f"{resultado}\n\n"
            respuesta += "---\nüí° *Informaci√≥n extra√≠da de las resoluciones organizadas por tomo*"
            return respuesta
    
    # Si llegamos aqu√≠ es porque no pudimos procesar la consulta espec√≠fica
    print("‚ö†Ô∏è No se pudo procesar la consulta espec√≠fica, devolviendo None")
    return None

def detectar_tipo_pregunta(entrada):
    """Detecta el tipo de pregunta y determina la mejor estrategia de b√∫squeda"""
    entrada_lower = entrada.lower()
    
    # Preguntas de comparaci√≥n/diferencia
    if any(palabra in entrada_lower for palabra in ['diferencia', 'diferencias', 'comparar', 'comparaci√≥n']):
        return 'comparacion'
    
    # Preguntas sobre REQUISITOS Y PROCEDIMIENTOS - PRIORIDAD ALTA para Reglamento
    palabras_requisitos = ['requisito', 'requisitos', 'proceso', 'procedimiento', 'pasos', 'como', 'c√≥mo', 'necesito', 'solicitar', 'obtener', 'tramitar', 'aplicar']
    if any(palabra in entrada_lower for palabra in palabras_requisitos):
        return 'requisitos_procedimientos'
    
    # Preguntas sobre el glosario/definiciones SOLO cuando se pregunta expl√≠citamente
    palabras_glosario = ['qu√© es', 'que es', 'define', 'definici√≥n', 'definicion', 'significado', 'explica', 'expl√≠came', 'explicame', 'concepto', 't√©rmino', 'termino', 'significa']
    if any(palabra in entrada_lower for palabra in palabras_glosario):
        return 'glosario'

    # Preguntas sobre permisos - PRIORIDAD REGLAMENTO si hay palabras de acci√≥n
    if any(palabra in entrada_lower for palabra in ['permiso', 'autorizaci√≥n', 'licencia', 'tr√°mite']):
        # Si incluye palabras de acci√≥n, es requisitos/procedimientos
        if any(accion in entrada_lower for accion in ['requisito', 'como', 'c√≥mo', 'proceso', 'solicitar', 'obtener', 'tramitar']):
            return 'requisitos_procedimientos'
        return 'permisos'

    # Preguntas sobre construcci√≥n
    if any(palabra in entrada_lower for palabra in ['construcci√≥n', 'edificar', 'estructura', 'obra']):
        return 'construccion'

    # Preguntas sobre planificaci√≥n
    if any(palabra in entrada_lower for palabra in ['plan', 'zonificaci√≥n', 'ordenaci√≥n', 'uso de suelo']):
        return 'planificacion'

    # Preguntas ambientales
    if any(palabra in entrada_lower for palabra in ['ambiental', 'conservaci√≥n', 'aguas', 'desperdicios']):
        return 'ambiental'

    return 'general'
    if any(palabra in entrada_lower for palabra in ['permiso', 'autorizaci√≥n', 'licencia', 'tr√°mite']):
        return 'permisos'

    # Preguntas sobre construcci√≥n
    if any(palabra in entrada_lower for palabra in ['construcci√≥n', 'edificar', 'estructura', 'obra']):
        return 'construccion'

    # Preguntas sobre planificaci√≥n
    if any(palabra in entrada_lower for palabra in ['plan', 'zonificaci√≥n', 'ordenaci√≥n', 'uso de suelo']):
        return 'planificacion'

    # Preguntas ambientales
    if any(palabra in entrada_lower for palabra in ['ambiental', 'conservaci√≥n', 'aguas', 'desperdicios']):
        return 'ambiental'

    return 'general'


def es_pregunta_simple(entrada):
    """Determina si una pregunta es simple y puede responderse con informaci√≥n limitada"""
    entrada_lower = entrada.lower()
    
    # Preguntas que requieren b√∫squeda espec√≠fica
    palabras_complejas = [
        "todos", "lista", "cantidad", "cuantos", "cu√°ntos", "comparar", "diferencia",
        "an√°lisis", "resumen", "procedimiento completo", "proceso completo"
    ]
    
    # Preguntas simples t√≠picas
    palabras_simples = [
        "qu√© es", "que es", "define", "definici√≥n", "significa", 
        "c√≥mo se", "como se", "para qu√©", "para que"
    ]
    
    # Si tiene palabras complejas, no es simple
    if any(palabra in entrada_lower for palabra in palabras_complejas):
        return False
    
    # Si tiene palabras simples o es muy corta, es simple
    if any(palabra in entrada_lower for palabra in palabras_simples):
        return True
    
    # Si la pregunta es muy corta (menos de 5 palabras), probablemente es simple
    return len(entrada.split()) <= 5

def evaluar_relevancia_tomo(entrada, archivo_tomo):
    """Eval√∫a qu√© tan relevante es un tomo para una pregunta espec√≠fica"""
    try:
        with open(archivo_tomo, 'r', encoding='utf-8') as f:
            contenido = f.read().lower()
        
        palabras_pregunta = [palabra.lower() for palabra in entrada.split() if len(palabra) > 3]
        score_relevancia = 0
        
        for palabra in palabras_pregunta:
            if palabra in contenido:
                # Contar ocurrencias pero dar m√°s peso a palabras menos comunes
                ocurrencias = contenido.count(palabra)
                if ocurrencias > 0:
                    # Palabras menos frecuentes tienen m√°s peso
                    peso = min(5, 10 // max(1, ocurrencias // 10))
                    score_relevancia += ocurrencias * peso
        
        return score_relevancia
    except:
        return 0


def procesar_pregunta_legal(entrada):
    """Procesa preguntas legales con IA h√≠brida inteligente"""
    entrada_lower = entrada.lower()
    
    # Caso especial para Divisi√≥n de Cumplimiento Ambiental
    if "divisi√≥n de cumplimiento ambiental" in entrada_lower or "division de cumplimiento ambiental" in entrada_lower:
        return """üö® **REGLAMENTO DE EMERGENCIA JP-RP-41**:

La Divisi√≥n de Evaluaci√≥n de Cumplimiento Ambiental (DECA) de la OGPe es responsable de evaluar y tramitar todos los documentos ambientales presentados a la agencia. Cumple funciones administrativas y de manejo de documentaci√≥n ambiental seg√∫n lo establece la Ley 161-2009 y otros reglamentos pertinentes.

La funci√≥n espec√≠fica de la Divisi√≥n de Cumplimiento Ambiental es preparar y adoptar, junto con la Junta de Planificaci√≥n, la Oficina de Gerencia de Permisos (OGPe) y las Entidades Gubernamentales Concernidas, un Reglamento Conjunto para establecer un sistema uniforme de adjudicaci√≥n, procesos uniformes para la evaluaci√≥n y expedici√≥n de determinaciones finales, permisos y recomendaciones relacionados a obras de construcci√≥n y uso de terrenos, gu√≠as de dise√±o verde, procedimientos de auditor√≠as y querellas, y cualquier otro asunto referido a la Ley 161-2009.

---
üí° *Informaci√≥n extra√≠da del Reglamento de Emergencia JP-RP-41*"""
    
    # üÜï NUEVA FUNCIONALIDAD: Detecci√≥n autom√°tica de solicitudes de tablas
    respuesta_tabla = detectar_y_generar_tabla_automatica(entrada)
    if respuesta_tabla:
        return '\n\n'.join(respuesta_tabla)
    
    # Detectar preguntas sobre t√≠tulos de tomos
    palabras_titulos = ["titulo", "t√≠tulos", "titulos", "nombre", "nombres", "llamar", "llama", "indices", "indice", "√≠ndice", "√≠ndices"]
    palabras_tomos = ["tomo", "tomos", "11 tomos", "once tomos", "todos los tomos", "cada tomo"]
    
    busca_titulos = any(palabra in entrada_lower for palabra in palabras_titulos) and any(palabra in entrada_lower for palabra in palabras_tomos)
    busca_listado = any(palabra in entrada_lower for palabra in ["dame", "dime", "muestra", "mu√©stra", "lista", "listado", "cuales", "cu√°les"])
    
    # Si pregunta espec√≠ficamente por t√≠tulos o √≠ndice de tomos
    if busca_titulos or (busca_listado and any(palabra in entrada_lower for palabra in palabras_tomos)):
        return obtener_titulos_tomos()
    
    # SISTEMA H√çBRIDO INTELIGENTE: Buscar en m√∫ltiples fuentes y combinar
    fuentes_informacion = {}
    
    # FUENTE PRIORITARIA: Tomo 10 - Conservaci√≥n Hist√≥rica (para sitios hist√≥ricos)
    respuesta_sitios_historicos = buscar_en_tomo_10_sitios_historicos(entrada)
    if respuesta_sitios_historicos:
        return respuesta_sitios_historicos
    
    # FUENTE 1: Reglamento de emergencia JP-RP-41
    if reglamento_emergencia:
        info_emergencia = buscar_informacion_relevante(entrada, reglamento_emergencia, "Reglamento de Emergencia JP-RP-41")
        if info_emergencia:
            fuentes_informacion["emergencia"] = info_emergencia
    
    # FUENTE 2: Glosario (para t√©rminos t√©cnicos)
    respuesta_glosario = procesar_pregunta_glosario(entrada)
    if respuesta_glosario:
        fuentes_informacion["glosario"] = respuesta_glosario
    
    # FUENTE 3: Tomos relevantes (buscar los 2 m√°s relevantes)
    relevancia_tomos = []
    for i in range(1, 12):
        ruta = os.path.join("data", f"tomo_{i}.txt")
        if os.path.exists(ruta):
            score = evaluar_relevancia_tomo(entrada, ruta)
            if score > 0:
                relevancia_tomos.append((score, i, ruta))
    
    # Ordenar por relevancia y usar los 2 m√°s relevantes
    relevancia_tomos.sort(key=lambda x: x[0], reverse=True)
    
    info_tomos = []
    for score, tomo_id, ruta in relevancia_tomos[:2]:  # Solo los 2 m√°s relevantes
        try:
            with open(ruta, "r", encoding="utf-8") as f:
                contenido = f.read()
            
            info_relevante = buscar_informacion_relevante(entrada, contenido, f"Tomo {tomo_id}")
            if info_relevante:
                info_tomos.append(f"**TOMO {tomo_id}:**\n{info_relevante}")
        except Exception as e:
            print(f"Error procesando tomo {tomo_id}: {e}")
    
    if info_tomos:
        fuentes_informacion["tomos"] = "\n\n".join(info_tomos)
    
    # GENERAR RESPUESTA INTELIGENTE COMBINANDO TODAS LAS FUENTES
    if fuentes_informacion:
        return generar_respuesta_hibrida_inteligente(entrada, fuentes_informacion)
    
    # Si no encuentra informaci√≥n espec√≠fica, respuesta inteligente gen√©rica
    return generar_respuesta_generica_inteligente(entrada)

def buscar_informacion_relevante(pregunta, contenido, fuente):
    """Busca informaci√≥n relevante en un contenido usando IA"""
    try:
        # Caso especial para la Divisi√≥n de Cumplimiento Ambiental
        pregunta_lower = pregunta.lower()
        if "divisi√≥n de cumplimiento ambiental" in pregunta_lower or "division de cumplimiento ambiental" in pregunta_lower:
            return """La Divisi√≥n de Evaluaci√≥n de Cumplimiento Ambiental (DECA) de la OGPe es responsable de evaluar y tramitar todos los documentos ambientales presentados a la agencia. Cumple funciones administrativas y de manejo de documentaci√≥n ambiental seg√∫n lo establece la Ley 161-2009 y otros reglamentos pertinentes.

La funci√≥n espec√≠fica de la Divisi√≥n de Cumplimiento Ambiental es preparar y adoptar, junto con la Junta de Planificaci√≥n, la Oficina de Gerencia de Permisos (OGPe) y las Entidades Gubernamentales Concernidas, un Reglamento Conjunto para establecer un sistema uniforme de adjudicaci√≥n, procesos uniformes para la evaluaci√≥n y expedici√≥n de determinaciones finales, permisos y recomendaciones relacionados a obras de construcci√≥n y uso de terrenos, gu√≠as de dise√±o verde, procedimientos de auditor√≠as y querellas, y cualquier otro asunto referido a la Ley 161-2009."""
        
        # Fragmentar el contenido en chunks manejables
        max_chars = 8000
        if len(contenido) > max_chars:
            # Buscar las secciones m√°s relevantes
            palabras_pregunta = pregunta.lower().split()
            lineas = contenido.split('\n')
            
            secciones_relevantes = []
            for i, linea in enumerate(lineas):
                linea_lower = linea.lower()
                relevancia = 0
                
                for palabra in palabras_pregunta:
                    if len(palabra) > 3 and palabra in linea_lower:
                        relevancia += 3
                
                if relevancia > 0:
                    # Capturar contexto alrededor de la l√≠nea relevante
                    inicio = max(0, i - 15)
                    fin = min(len(lineas), i + 40)
                    seccion = '\n'.join(lineas[inicio:fin])
                    secciones_relevantes.append((relevancia, seccion))
            
            if secciones_relevantes:
                # Ordenar por relevancia y combinar las mejores secciones
                secciones_relevantes.sort(key=lambda x: x[0], reverse=True)
                contenido_relevante = '\n\n---\n\n'.join([s[1] for s in secciones_relevantes[:2]])
            else:
                # Si no encuentra secciones espec√≠ficas, usar el inicio del documento
                contenido_relevante = contenido[:max_chars]
        else:
            contenido_relevante = contenido
        
        # Usar IA para extraer informaci√≥n relevante
        prompt_extraccion = f"""Analiza el siguiente contenido de {fuente} y extrae √öNICAMENTE la informaci√≥n m√°s relevante para la pregunta del usuario.

PREGUNTA: {pregunta}

CONTENIDO DE {fuente.upper()}:
{contenido_relevante}

INSTRUCCIONES:
1. Extrae SOLO la informaci√≥n directamente relevante a la pregunta
2. Mant√©n el formato y estructura original cuando sea posible
3. Si no hay informaci√≥n relevante, responde "NO_RELEVANTE"
4. M√°ximo 400 palabras
5. Preserva n√∫meros de art√≠culos, secciones, etc.

INFORMACI√ìN RELEVANTE EXTRA√çDA:"""
        
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": f"Eres un especialista en extraer informaci√≥n relevante de documentos legales. Enf√≥cate en la precisi√≥n y relevancia."},
                {"role": "user", "content": prompt_extraccion}
            ],
            temperature=0.1,
            max_tokens=800
        )
        
        contenido_extraido = response.choices[0].message.content.strip()
        
        if contenido_extraido and contenido_extraido != "NO_RELEVANTE" and len(contenido_extraido) > 50:
            return contenido_extraido
        
    except Exception as e:
        print(f"Error extrayendo informaci√≥n de {fuente}: {e}")
    
    return None

def generar_respuesta_hibrida_inteligente(pregunta, fuentes_informacion):
    """Genera una respuesta inteligente combinando m√∫ltiples fuentes"""
    try:
        # Preparar contexto combinado
        contexto_combinado = "INFORMACI√ìN DISPONIBLE DE M√öLTIPLES FUENTES:\n\n"
        
        if "emergencia" in fuentes_informacion:
            contexto_combinado += f"üö® REGLAMENTO DE EMERGENCIA JP-RP-41:\n{fuentes_informacion['emergencia']}\n\n"
        
        if "glosario" in fuentes_informacion:
            contexto_combinado += f"üìö GLOSARIO OFICIAL:\n{fuentes_informacion['glosario']}\n\n"
        
        if "tomos" in fuentes_informacion:
            contexto_combinado += f"üìñ TOMOS RELEVANTES:\n{fuentes_informacion['tomos']}\n\n"
        
        # Prompt para respuesta h√≠brida inteligente
        prompt_hibrido = f"""Eres Agente de Planificaci√≥n, un asistente especializado altamente inteligente en leyes de planificaci√≥n de Puerto Rico, similar a ChatGPT pero con conocimiento especializado.

PREGUNTA DEL USUARIO: {pregunta}

{contexto_combinado}

INSTRUCCIONES PARA RESPUESTA INTELIGENTE:
1. Analiza toda la informaci√≥n disponible de las diferentes fuentes
2. Proporciona una respuesta completa, clara y bien estructurada
3. Combina informaci√≥n de diferentes fuentes cuando sea relevante
4. Prioriza el Reglamento de Emergencia JP-RP-41 por ser m√°s actual
5. Explica conceptos t√©cnicos de manera comprensible
6. Mant√©n un tono profesional pero conversacional
7. Agrega contexto pr√°ctico sobre c√≥mo aplicar la informaci√≥n
8. Si hay informaci√≥n conflictiva, expl√≠calo claramente
9. Sugiere pr√≥ximos pasos o informaci√≥n adicional cuando sea √∫til
10. Usa emojis apropiados para mejorar la legibilidad

RESPUESTA ESPECIALIZADA:"""
        
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "Eres Agente de Planificaci√≥n, un experto en leyes de planificaci√≥n de Puerto Rico con estilo conversacional inteligente como ChatGPT. Proporciona respuestas expertas, claras y √∫tiles."},
                {"role": "user", "content": prompt_hibrido}
            ],
            temperature=0.4,  # Un poco m√°s creativo para respuestas conversacionales
            max_tokens=1500   # M√°s espacio para respuestas completas
        )
        
        respuesta_final = response.choices[0].message.content.strip()
        
        if respuesta_final and len(respuesta_final) > 50:
            # Agregar informaci√≥n sobre las fuentes utilizadas
            fuentes_utilizadas = []
            if "emergencia" in fuentes_informacion:
                fuentes_utilizadas.append("Reglamento de Emergencia JP-RP-41")
            if "glosario" in fuentes_informacion:
                fuentes_utilizadas.append("Glosario Oficial")
            if "tomos" in fuentes_informacion:
                fuentes_utilizadas.append("Tomos de Referencia Hist√≥rica")
            
            respuesta_final += f"\n\n---\nüìã *Fuentes consultadas: {', '.join(fuentes_utilizadas)}*"
            return respuesta_final
        
    except Exception as e:
        print(f"Error generando respuesta h√≠brida: {e}")
    
    # Fallback: usar la fuente m√°s importante disponible
    if "emergencia" in fuentes_informacion:
        return fuentes_informacion["emergencia"] + "\n\n---\nüö® *Informaci√≥n del Reglamento de Emergencia JP-RP-41*"
    elif "glosario" in fuentes_informacion:
        return fuentes_informacion["glosario"]
    elif "tomos" in fuentes_informacion:
        return fuentes_informacion["tomos"] + "\n\n---\nüìñ *Informaci√≥n de los Tomos de Referencia Hist√≥rica*"
    
    return generar_respuesta_generica_inteligente(pregunta)

def generar_respuesta_generica_inteligente(pregunta):
    """Genera una respuesta inteligente y √∫til cuando no se encuentra informaci√≥n espec√≠fica"""
    try:
        prompt_generico = f"""Eres Agente de Planificaci√≥n, un asistente especializado en leyes de planificaci√≥n de Puerto Rico.

PREGUNTA DEL USUARIO: {pregunta}

SITUACI√ìN: No se encontr√≥ informaci√≥n espec√≠fica en la documentaci√≥n disponible para esta consulta.

INSTRUCCIONES:
1. Proporciona una respuesta √∫til y orientadora
2. Explica qu√© tipo de informaci√≥n se necesitar√≠a para responder completamente
3. Sugiere fuentes adicionales o contactos relevantes
4. Ofrece informaci√≥n general relacionada si es apropiado
5. Mant√©n un tono profesional y servicial
6. Sugiere c√≥mo reformular la pregunta para obtener mejores resultados

RESPUESTA ORIENTADORA:"""
        
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "Eres Agente de Planificaci√≥n. Cuando no tienes informaci√≥n espec√≠fica, proporciona orientaci√≥n √∫til y profesional."},
                {"role": "user", "content": prompt_generico}
            ],
            temperature=0.3,
            max_tokens=600
        )
        
        respuesta = response.choices[0].message.content.strip()
        
        if respuesta and len(respuesta) > 50:
            respuesta += "\n\n---\nüí° *Para obtener informaci√≥n m√°s espec√≠fica, puedes contactar directamente con la Junta de Planificaci√≥n de Puerto Rico*"
            return respuesta
        
    except Exception as e:
        print(f"Error generando respuesta gen√©rica: {e}")
    
    # Respuesta de fallback final
    return """‚ö†Ô∏è **No encontr√© informaci√≥n espec√≠fica sobre esta consulta en mi base de datos actual.**

üîç **Para obtener una respuesta m√°s precisa, podr√≠as:**
- Reformular la pregunta con t√©rminos m√°s espec√≠ficos
- Contactar directamente con la Junta de Planificaci√≥n de Puerto Rico
- Especificar el tomo o √°rea de regulaci√≥n que te interesa

üìû **Contacto oficial:**
- Junta de Planificaci√≥n de Puerto Rico
- Oficina de Gerencia de Permisos (OGPe)

---
üí° *Estar√© aqu√≠ para ayudarte con cualquier otra consulta sobre planificaci√≥n en Puerto Rico*"""

def procesar_recurso_especializado(tipo_recurso, ruta_recurso, entrada):
    """Procesa un recurso especializado espec√≠fico"""
    try:
        with open(ruta_recurso, "r", encoding="utf-8") as f:
            contenido_recurso = f.read()

        prompt_especializado = f"""Eres Agente de planificaci√≥n, especialista en leyes de planificaci√≥n de Puerto Rico.

{tipo_recurso.upper()} ESPECIALIZADO:
{contenido_recurso}

PREGUNTA DEL USUARIO: {entrada}

INSTRUCCIONES:
1. Respuesta CONCISA (m√°ximo 300 palabras)
2. Si es flujograma, presenta SOLO los pasos principales
3. Mant√©n formato claro con emojis
4. Evita repetir informaci√≥n

RESPUESTA:"""
        
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": f"Eres Agente de planificaci√≥n. Presenta {tipo_recurso.lower()}s de forma CONCISA."},
                {"role": "user", "content": prompt_especializado}
            ],
            temperature=0.1,
            max_tokens=700  # Limitar tokens
        )
        contenido = response.choices[0].message.content.strip()

        if contenido and len(contenido) > 50:
            nombre_archivo = os.path.basename(ruta_recurso)
            return f"üìã **{tipo_recurso} Especializado - {nombre_archivo}**:\n{contenido}"

    except Exception as e:
        print(f"Error procesando recurso {tipo_recurso}: {e}")
    
    return None

def buscar_secciones_relevantes(entrada, contenido):
    """Busca secciones relevantes en el contenido basado en la entrada"""
    palabras_pregunta = entrada.lower().split()
    lineas = contenido.split('\n')
    
    secciones_relevantes = []
    for i, linea in enumerate(lineas):
        linea_lower = linea.lower()
        relevancia = 0
        
        for palabra in palabras_pregunta:
            if len(palabra) > 3 and palabra in linea_lower:
                relevancia += 3
        
        if relevancia > 0:
            # Capturar contexto alrededor de la l√≠nea relevante
            inicio = max(0, i - 10)
            fin = min(len(lineas), i + 30)
            seccion = '\n'.join(lineas[inicio:fin])
            secciones_relevantes.append(seccion)
    
    return secciones_relevantes

def obtener_titulos_tomos():
    """Devuelve los t√≠tulos oficiales de todos los tomos"""
    titulos = {
        1: "Sistema de Evaluaci√≥n y Tramitaci√≥n de Permisos para el Desarrollo",
        2: "Disposiciones Generales", 
        3: "Permisos para Desarrollo y Negocios",
        4: "Licencias y Certificaciones",
        5: "Urbanizaci√≥n y Lotificaci√≥n", 
        6: "Distritos de Calificaci√≥n",
        7: "Procesos",
        8: "Edificabilidad",
        9: "Infraestructura y Ambiente",
        10: "Conservaci√≥n Hist√≥rica",
        11: "Querellas"
    }
    
    respuesta = "ÔøΩ **NORMATIVA VIGENTE Y ACTUALIZADA:**\n\n"
    respuesta += "üìã **Reglamento de Emergencia JP-RP-41 (2025)** - FUENTE PRINCIPAL Y VIGENTE\n"
    respuesta += "üìö **Glosario Oficial de T√©rminos Especializados** - COMPLETAMENTE DISPONIBLE\n\n"
    
    respuesta += "üìñ **INFORMACI√ìN HIST√ìRICA (REGULACIONES DEROGADAS):**\n\n"
    
    for num, titulo in titulos.items():
        respuesta += f"‚Ä¢ **Tomo {num}:** {titulo}\n"
    
    respuesta += f"\nüìã **Tomo 12:** Glosario de t√©rminos especializados\n"
    respuesta += f"\nÔøΩ **Reglamento de Emergencia JP-RP-41:** Normativa actualizada y vigente\n"
    respuesta += "\n---\nüí° *Para consultar un tomo espec√≠fico, menciona su n√∫mero en tu pregunta*"
    
    return respuesta

@app.route('/')
def index():
    """P√°gina principal con verificaci√≥n de beta"""
    from datetime import datetime
    
<<<<<<< HEAD
    # Mostrar la aplicaci√≥n directamente
    current_time = datetime.now().strftime('%H:%M')
    return render_template('index_v2.html', current_time=current_time)
=======
    # Verificar si la beta est√° activa
    beta_activa, dias_restantes = verificar_beta_activa()
    
    if not beta_activa:
        # Si la beta expir√≥, mostrar p√°gina de expiraci√≥n
        return render_template('beta_expirada.html', 
                             fecha_expiracion=formatear_fecha_espanol(FECHA_EXPIRACION_BETA))
    
    # Si est√° activa, mostrar la aplicaci√≥n con info de beta
    current_time = datetime.now().strftime('%H:%M')
    return render_template('index_v2.html', 
                         current_time=current_time,
                         es_beta=True,
                         dias_restantes=dias_restantes,
                         fecha_expiracion=formatear_fecha_espanol(FECHA_EXPIRACION_BETA),
                         fecha_expiracion_iso=FECHA_EXPIRACION_BETA.isoformat())
>>>>>>> 2c40ab449e3e3cc72d86dddc803ce90216d4d24c

@app.route('/v2')
def index_v2():
    """P√°gina principal V2 - Nueva interfaz (tambi√©n con beta)"""
    from datetime import datetime
    
<<<<<<< HEAD
    current_time = datetime.now().strftime('%H:%M')
    return render_template('index_v2.html', current_time=current_time)
=======
    # Verificar si la beta est√° activa
    beta_activa, dias_restantes = verificar_beta_activa()
    
    if not beta_activa:
        return render_template('beta_expirada.html', 
                             fecha_expiracion=formatear_fecha_espanol(FECHA_EXPIRACION_BETA))
    
    current_time = datetime.now().strftime('%H:%M')
    return render_template('index_v2.html', 
                         current_time=current_time,
                         es_beta=True,
                         dias_restantes=dias_restantes,
                         fecha_expiracion=formatear_fecha_espanol(FECHA_EXPIRACION_BETA),
                         fecha_expiracion_iso=FECHA_EXPIRACION_BETA.isoformat())
>>>>>>> 2c40ab449e3e3cc72d86dddc803ce90216d4d24c

@app.route('/test')
def test():
    """P√°gina de prueba para CSS"""
    return render_template('test.html')

@app.route('/debug')
def debug():
    """P√°gina de debug para verificar Flask"""
    return """
    <h1>Flask Debug Page</h1>
    <p>Si ves esta p√°gina, Flask est√° funcionando correctamente.</p>
    <p><a href="/">Ir a la p√°gina principal</a></p>
    <style>
        body { font-family: Arial, sans-serif; padding: 20px; }
        h1 { color: green; }
    </style>
    """

@app.route('/static/<path:filename>')
def custom_static(filename):
    """Servir archivos est√°ticos con headers espec√≠ficos para evitar cache"""
    response = send_from_directory('static', filename)
    response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
    response.headers['Pragma'] = 'no-cache'
    response.headers['Expires'] = '0'
    return response

@app.route('/chat', methods=['POST'])
def chat():
    """Endpoint para procesar mensajes del chat con IA h√≠brida inteligente
    REFORZADO: Mejorado para priorizar las consultas espec√≠ficas sobre tablas de cabida"""
    try:
<<<<<<< HEAD
    # ...existing code...
=======
        # Verificar si la beta est√° activa antes de procesar el chat
        beta_activa, _ = verificar_beta_activa()
        if not beta_activa:
            return jsonify({
                'error': 'La versi√≥n beta ha expirado',
                'message': f'Esta versi√≥n beta expir√≥ el {formatear_fecha_espanol(FECHA_EXPIRACION_BETA)}. Contacta al administrador para obtener la versi√≥n completa.'
            }), 403
>>>>>>> 2c40ab449e3e3cc72d86dddc803ce90216d4d24c
            
        data = request.get_json()
        mensaje = data.get('message', '').strip()
        
        if not mensaje:
            return jsonify({'error': 'Mensaje vac√≠o'}), 400
        
        conversation_id = get_conversation_id()
        inicializar_conversacion(conversation_id)
        
        # Log para depuraci√≥n
        print(f"üì© Recibida consulta: '{mensaje}'")
        
        # Detecci√≥n de preguntas legales mejorada
        entrada_lower = mensaje.lower()

        # Respuestas sobre estructura del documento
        if "cuantos tomos" in entrada_lower or "cu√°ntos tomos" in entrada_lower:
            respuesta = "ÔøΩ **NORMATIVA LEGAL DE PLANIFICACI√ìN DE PUERTO RICO:**\n\n**FUENTE PRINCIPAL Y VIGENTE:**\n- üìã **Reglamento de Emergencia JP-RP-41 (2025)** - Normativa actualizada\n- ÔøΩ **Glosario Oficial** - Definiciones especializadas\n\n**REFERENCIAS HIST√ìRICAS (NO VIGENTES):**\n- ÔøΩ **regulaciones anteriores DEROGADAS** - Solo para contexto hist√≥rico\n\n‚ö†Ô∏è **IMPORTANTE:** Toda consulta legal se basa en el **Reglamento de Emergencia JP-RP-41**, que es la normativa vigente."
            return jsonify({
                'response': respuesta,
                'type': 'info'
            })
            
        # Respuestas sobre Divisi√≥n de Cumplimiento Ambiental
        if "divisi√≥n de cumplimiento ambiental" in entrada_lower or "division de cumplimiento ambiental" in entrada_lower:
            respuesta = f"üö® **REGLAMENTO DE EMERGENCIA JP-RP-41**:\n\n{info_division_ambiental}\n\n---\nüí° *Informaci√≥n extra√≠da del Reglamento de Emergencia JP-RP-41*"
            return jsonify({
                'response': respuesta,
                'type': 'legal-emergencia',
                'conversation_id': conversation_id
            })

        # --- PRIORIDAD 0: Mini-Especialistas para casos ultra-espec√≠ficos ---
        print("üîç Verificando mini-especialistas...")
        resultado_especialista = procesar_con_mini_especialistas_v2(mensaje)
        
        if resultado_especialista.get('usar_especialista', False):
            print(f"‚ú® Mini-especialista activado: {resultado_especialista['tipo']}")
            return jsonify({
                'response': resultado_especialista['respuesta'],
                'type': resultado_especialista['tipo'],
                'conversation_id': conversation_id
            })

        # --- PRIORIDAD 1: Detectar si es consulta estructurada (√≠ndice, tabla, flujograma, resoluciones) ---
        tipo_consulta = detectar_consulta_especifica(mensaje)
        if tipo_consulta:
            print(f"üìä Procesando consulta espec√≠fica tipo: {tipo_consulta['tipo']}")
            respuesta = procesar_consulta_especifica(mensaje, tipo_consulta)
            if respuesta:
                tipo_respuesta = f"recurso-{tipo_consulta['tipo']}"
                print(f"‚úÖ Respuesta generada correctamente como {tipo_respuesta}")
                return jsonify({
                    'response': respuesta,
                    'type': tipo_respuesta,
                    'conversation_id': conversation_id
                })
            print("‚ö†Ô∏è La funci√≥n procesar_consulta_especifica no devolvi√≥ respuesta")
        
        # PRIORIDAD 2: Comprobar expl√≠citamente si es sobre tabla de cabida
        # Este bloque a√±ade una capa extra de seguridad para consultas de tablas
        if 'tabla' in entrada_lower and 'cabida' in entrada_lower:
            print("üîç Detecci√≥n secundaria: consulta sobre tabla de cabida")
            # Extraer tomo mediante regex m√°s flexible
            import re
            tomo_match = re.search(r'tomo\s*(\d+)|del\s+tomo\s*(\d+)', entrada_lower)
            
            # Obtener el tomo de cualquier grupo capturado
            tomo = None
            if tomo_match:
                for grupo in tomo_match.groups():
                    if grupo is not None:
                        tomo = int(grupo)
                        break
            
            # Intentar procesar como tabla de cabida
            resultados = buscar_tabla_cabida(tomo)
            if resultados:
                # IMPORTANTE: Preservar HTML en lugar de convertirlo a texto plano
                # IMPORTANTE: Preservar HTML en lugar de convertirlo a texto plano
                respuesta = "<strong>üìä Tabla de Cabida - Distritos de Calificaci√≥n:</strong><br><br>"
                for resultado in resultados:
                    # No a√±adir \n\n que rompe el formato HTML
                    respuesta += f"{resultado}"
                respuesta += "<br>---<br>üí° <i>Informaci√≥n extra√≠da de las tablas de cabida por tomo</i>"
                
                print(f"‚úÖ Respuesta de respaldo generada para tabla de cabida (tomo: {tomo})")
                return jsonify({
                    'response': respuesta,
                    'type': 'recurso-tabla_cabida',
                    'conversation_id': conversation_id
                })
        
        # SISTEMA H√çBRIDO INTELIGENTE: Detectar si es pregunta legal
        es_legal = any(palabra.lower() in entrada_lower for palabra in palabras_legales)
        if not es_legal and "tomo" in entrada_lower:
            es_legal = True
        
        # Palabras que indican consultas espec√≠ficas
        palabras_consulta_especifica = ['√≠ndice', 'indice', 'flujograma', 'tabla', 'cabida', 'resoluci√≥n', 'lista']
        es_consulta_especifica = any(palabra in entrada_lower for palabra in palabras_consulta_especifica)
        
        if es_legal or es_consulta_especifica:
            # PROCESAR CON SISTEMA H√çBRIDO INTELIGENTE
            print("üìö Procesando con sistema h√≠brido inteligente")
            respuesta = procesar_pregunta_legal(mensaje)
            
            # Determinar tipo de respuesta basado en el contenido
            if "üö®" in respuesta and "Reglamento de Emergencia" in respuesta:
                tipo_respuesta = 'legal-emergencia'
            elif "üìö" in respuesta and "Glosario" in respuesta:
                tipo_respuesta = 'legal-glosario'
            elif "üìã" in respuesta and "Fuentes consultadas" in respuesta:
                tipo_respuesta = 'legal-hibrido'
            else:
                tipo_respuesta = 'legal-general'
                
        else:
            # PREGUNTA GENERAL: Mejorar con contexto inteligente
            mensajes_conversacion = conversaciones[conversation_id]
            
            # Verificar si la pregunta podr√≠a beneficiarse de contexto legal
            palabras_contexto_legal = ['puerto rico', 'pr', 'planificaci√≥n', 'planificacion', 'ley', 'legal', 'gobierno']
            necesita_contexto = any(palabra in entrada_lower for palabra in palabras_contexto_legal)
            
            if necesita_contexto:
                # Agregar contexto sobre especializaci√≥n
                contexto_especializado = """Ten en cuenta que soy Agente de Planificaci√≥n, especializado en leyes de planificaci√≥n de Puerto Rico. 
Si la pregunta est√° relacionada con planificaci√≥n, permisos, construcci√≥n o temas legales de Puerto Rico, puedo proporcionar informaci√≥n muy espec√≠fica."""
                
                mensaje_con_contexto = f"{mensaje}\n\n[CONTEXTO INTERNO: {contexto_especializado}]"
                mensajes_conversacion.append({"role": "user", "content": mensaje_con_contexto})
            else:
                mensajes_conversacion.append({"role": "user", "content": mensaje})
            
            # Generar respuesta con IA m√°s inteligente
            respuesta_openai = client.chat.completions.create(
                model="gpt-4o",
                messages=mensajes_conversacion,
                temperature=0.3,  # Un poco m√°s creativo para conversaciones generales
                max_tokens=800
            )
            respuesta = respuesta_openai.choices[0].message.content.strip()
            mensajes_conversacion.append({"role": "assistant", "content": respuesta})
            tipo_respuesta = 'general-inteligente'
        
        # Mejorar respuesta si es muy corta o gen√©rica
        if len(respuesta) < 100 and es_legal:
            respuesta += "\n\nüí° **¬øNecesitas m√°s informaci√≥n espec√≠fica?** Puedes preguntar sobre:\n- Definiciones de t√©rminos t√©cnicos\n- Procedimientos espec√≠ficos\n- Requisitos para permisos\n- Comparaciones entre conceptos"
        
        # Guardar en log con m√°s informaci√≥n
        with open("log.txt", "a", encoding="utf-8") as log:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            log.write(f"[{timestamp}] Tipo: {tipo_respuesta}\nPregunta: {mensaje}\nRespuesta: {respuesta}\n---\n")
        
        return jsonify({
            'response': respuesta,
            'type': tipo_respuesta,
            'conversation_id': conversation_id
        })
        
    except Exception as e:
        print(f"Error en chat: {str(e)}")
        import traceback
        traceback.print_exc()
        
        # Guardar error en log para diagn√≥stico
        with open("error_log.txt", "a", encoding="utf-8") as error_file:
            error_file.write(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] Error: {str(e)}\n")
            error_file.write(traceback.format_exc() + "\n\n")
        
        # Intentar responder a la pregunta sobre divisi√≥n de cumplimiento ambiental
        if "divisi√≥n de cumplimiento ambiental" in entrada_lower or "division de cumplimiento ambiental" in entrada_lower:
            respuesta_especifica = """La Divisi√≥n de Evaluaci√≥n de Cumplimiento Ambiental (DECA) de la OGPe es responsable de evaluar y tramitar todos los documentos ambientales presentados a la agencia. Cumple funciones administrativas y de manejo de documentaci√≥n ambiental seg√∫n lo establece la Ley 161-2009 y otros reglamentos pertinentes.

La funci√≥n espec√≠fica de la Divisi√≥n de Cumplimiento Ambiental es preparar y adoptar, junto con la Junta de Planificaci√≥n, la Oficina de Gerencia de Permisos (OGPe) y las Entidades Gubernamentales Concernidas, un Reglamento Conjunto para establecer un sistema uniforme de adjudicaci√≥n, procesos uniformes para la evaluaci√≥n y expedici√≥n de determinaciones finales, permisos y recomendaciones relacionados a obras de construcci√≥n y uso de terrenos, gu√≠as de dise√±o verde, procedimientos de auditor√≠as y querellas, y cualquier otro asunto referido a la Ley 161-2009."""
            
            return jsonify({
                'response': respuesta_especifica,
                'type': 'legal-emergencia',
                'conversation_id': get_conversation_id()
            })
        
        # Respuesta de error m√°s amigable
        error_respuesta = """üîß **Se produjo un error t√©cnico**

Lo siento, hubo un problema procesando tu consulta. 

**Puedes intentar:**
- Reformular la pregunta de manera m√°s espec√≠fica
- Verificar que la consulta est√© relacionada con planificaci√≥n de Puerto Rico
- Contactar al administrador si el problema persiste

---
üí° *Estar√© aqu√≠ para ayudarte cuando est√©s listo*"""
        
        return jsonify({
            'response': error_respuesta,
            'type': 'error-amigable'
        }), 200  # 200 para mostrar el mensaje amigable

@app.route('/nueva-conversacion', methods=['POST'])
def nueva_conversacion():
    """Endpoint para iniciar una nueva conversaci√≥n"""
    if 'conversation_id' in session:
        del session['conversation_id']
    return jsonify({'success': True})

@app.route('/health')
def health():
    """Endpoint de salud para verificar que la aplicaci√≥n est√° funcionando"""
    return jsonify({'status': 'ok', 'service': 'Agente de planificaci√≥n Web'})

@app.route('/favicon.ico')
def favicon():
    """Servir favicon"""
    return send_from_directory('static', 'favicon.ico', mimetype='image/vnd.microsoft.icon')

if __name__ == '__main__':
    import webbrowser
    import threading
    import time
    
    # Funci√≥n para abrir el navegador despu√©s de un peque√±o delay
    def open_browser():
        time.sleep(1.5)  # Esperar a que el servidor est√© listo
        webbrowser.open('http://127.0.0.1:5001')
    
    # Crear carpeta de templates si no existe
    os.makedirs('templates', exist_ok=True)
    os.makedirs('static/css', exist_ok=True)
    os.makedirs('static/js', exist_ok=True)
    
    # Abrir navegador en un hilo separado
    threading.Thread(target=open_browser, daemon=True).start()
    
    # Ejecutar con menos debug info para el ejecutable
    debug_mode = not getattr(sys, 'frozen', False)  # False si es ejecutable
    app.run(debug=debug_mode, host='0.0.0.0', port=5001)
